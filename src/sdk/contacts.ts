/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { addressBookContactsAdd } from "../funcs/addressBookContactsAdd.js";
import { addressBookContactsAddToGroup } from "../funcs/addressBookContactsAddToGroup.js";
import { addressBookContactsDelete } from "../funcs/addressBookContactsDelete.js";
import { addressBookContactsGet } from "../funcs/addressBookContactsGet.js";
import { addressBookContactsList } from "../funcs/addressBookContactsList.js";
import { addressBookContactsRemoveFromGroup } from "../funcs/addressBookContactsRemoveFromGroup.js";
import { addressBookContactsUpdate } from "../funcs/addressBookContactsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { ByExtId } from "./byextid.js";

export class Contacts extends ClientSDK {
  private _byExtId?: ByExtId;
  get byExtId(): ByExtId {
    return (this._byExtId ??= new ByExtId(this._options));
  }

  /**
   * List contacts
   *
   * @remarks
   * Retrieve a paginated list of all contacts defined in your account’s **Address Book**.
   */
  async list(
    request?: operations.ListContactsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListContactsResponse> {
    return unwrapAsync(addressBookContactsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a new contact
   *
   * @remarks
   * Create a new contact in your account’s **Address Book**.
   */
  async add(
    request: models.Contact,
    options?: RequestOptions,
  ): Promise<operations.AddContactResponse> {
    return unwrapAsync(addressBookContactsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve contact details
   *
   * @remarks
   * Get the details of a contact from your Address Book using its global `id`.
   */
  async get(
    request: operations.GetContactByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetContactByIdResponse> {
    return unwrapAsync(addressBookContactsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a contact
   *
   * @remarks
   * Update a contact by its global ID.
   */
  async update(
    request: operations.UpdateContactRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateContactResponse> {
    return unwrapAsync(addressBookContactsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a contact
   *
   * @remarks
   * Remove a contact from your account by system ID.
   */
  async delete(
    request: operations.DeleteContactRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteContactResponse | undefined> {
    return unwrapAsync(addressBookContactsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a contact from a group
   *
   * @remarks
   * Remove a contact from a group in your Address Book. This does not delete the contact; it only detaches the contact from the group.
   *
   * Provide the contact’s `id` and the group’s `group_id` parameters to perform the detachment.
   */
  async removeFromGroup(
    request: operations.RemoveContactFromGroupRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveContactFromGroupResponse | undefined> {
    return unwrapAsync(addressBookContactsRemoveFromGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a contact to a group
   *
   * @remarks
   * Assign a contact to a group. If a contact and a group exist in your account, you can add the contact to that group.
   *
   * Provide the contact’s `id` and the group’s `group_id` parameters to perform the assignment.
   */
  async addToGroup(
    request: operations.AddContactToGroupRequest,
    options?: RequestOptions,
  ): Promise<operations.AddContactToGroupResponse | undefined> {
    return unwrapAsync(addressBookContactsAddToGroup(
      this,
      request,
      options,
    ));
  }
}
