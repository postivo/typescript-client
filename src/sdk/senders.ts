/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { sendersAdd } from "../funcs/sendersAdd.js";
import { sendersDelete } from "../funcs/sendersDelete.js";
import { sendersList } from "../funcs/sendersList.js";
import { sendersVerify } from "../funcs/sendersVerify.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Senders extends ClientSDK {
  /**
   * List senders
   *
   * @remarks
   * Retrieve the list of allowed senders defined in your account. Senders are registered in your account and must be verified and activated before use. Activated senders have `active: true` property and can be used to send shipments. Inactive senders are also returned (`active: false`), but cannot be used until activated.
   */
  async list(
    options?: RequestOptions,
  ): Promise<operations.ListSendersResponse> {
    return unwrapAsync(sendersList(
      this,
      options,
    ));
  }

  /**
   * Add a new sender
   *
   * @remarks
   * Create a new sender on your account. The request must contain a `Sender` object. To prevent fraud, all additional senders are verified by mailing a verification code to the sender’s address. Complete the verification using the `verifySender` method. Verified senders have `active: true` and can be used to send shipments. Inactive senders are also returned (`active: false`), but cannot be used until verification is completed.
   */
  async add(
    request: models.Sender,
    options?: RequestOptions,
  ): Promise<operations.AddSenderResponse> {
    return unwrapAsync(sendersAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a sender
   *
   * @remarks
   * Remove a sender from your account by `id`. Pass the sender’s `id` parameter to remove it. The sender is deleted immediately.
   */
  async delete(
    request: operations.DeleteSenderRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteSenderResponse | undefined> {
    return unwrapAsync(sendersDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Verify sender
   *
   * @remarks
   * Verify a sender to activate it. After adding a new sender, a letter containing a verification code is mailed to the sender’s address. Provide this code to complete verification.
   */
  async verify(
    request: operations.VerifySenderRequest,
    options?: RequestOptions,
  ): Promise<operations.VerifySenderResponse | undefined> {
    return unwrapAsync(sendersVerify(
      this,
      request,
      options,
    ));
  }
}
