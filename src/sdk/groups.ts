/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { addressBookGroupsAdd } from "../funcs/addressBookGroupsAdd.js";
import { addressBookGroupsDelete } from "../funcs/addressBookGroupsDelete.js";
import { addressBookGroupsGet } from "../funcs/addressBookGroupsGet.js";
import { addressBookGroupsList } from "../funcs/addressBookGroupsList.js";
import { addressBookGroupsUpdate } from "../funcs/addressBookGroupsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Groups extends ClientSDK {
  /**
   * List groups
   *
   * @remarks
   * Retrieve the full list of groups defined in your account’s Address Book.
   */
  async list(
    options?: RequestOptions,
  ): Promise<operations.ListGroupsResponse> {
    return unwrapAsync(addressBookGroupsList(
      this,
      options,
    ));
  }

  /**
   * Add a new group
   *
   * @remarks
   * Create a new contact group in your account’s Address Book.
   */
  async add(
    request: models.Group,
    options?: RequestOptions,
  ): Promise<operations.AddGroupResponse> {
    return unwrapAsync(addressBookGroupsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve group details
   *
   * @remarks
   * Get the details of a single group from your Address Book by its `id` (returned when the group was created).
   */
  async get(
    request: operations.GetGroupByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetGroupByIdResponse> {
    return unwrapAsync(addressBookGroupsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a group
   *
   * @remarks
   * Update a group’s details by ID.
   */
  async update(
    request: operations.UpdateGroupRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateGroupResponse> {
    return unwrapAsync(addressBookGroupsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a group
   *
   * @remarks
   * Remove a group from your account’s Address Book by `ID`. Pass the group’s `id` to remove it. The group is deleted immediately from the Address Book.
   *
   * If you also want to remove contacts that belong to this group, set the parameter `contacts` to `delete`. The default is `contacts: detach`, which detaches contacts from the removed group but leaves them in the Address Book.
   */
  async delete(
    request: operations.DeleteGroupRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteGroupResponse | undefined> {
    return unwrapAsync(addressBookGroupsDelete(
      this,
      request,
      options,
    ));
  }
}
