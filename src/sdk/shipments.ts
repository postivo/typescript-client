/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { shipmentsCancel } from "../funcs/shipmentsCancel.js";
import { shipmentsDispatch } from "../funcs/shipmentsDispatch.js";
import { shipmentsDocuments } from "../funcs/shipmentsDocuments.js";
import { shipmentsPrice } from "../funcs/shipmentsPrice.js";
import { shipmentsStatus } from "../funcs/shipmentsStatus.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Shipments extends ClientSDK {
  /**
   * Retrieve shipment details with status events
   *
   * @remarks
   * Retrieve the current status and details for one or more shipments by their `ids`. Pass the unique shipment IDs (returned when the shipments were created) as a path parameter. To query provide a list (up to **50** IDs per call). For larger batches, split the requests.
   */
  async status(
    request: operations.GetStatusRequest,
    options?: RequestOptions,
  ): Promise<operations.GetStatusResponse> {
    return unwrapAsync(shipmentsStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel shipments
   *
   * @remarks
   * Cancel shipments that have not yet been processed by their `ids`. Pass the unique shipment IDs (returned when the shipment was created) as a parameter. To cancel multiple shipments at once, provide a list of IDs (up to **50** per call). For larger volumes, split the operation into multiple requests. Only shipments with status `ACCEPTED` can be cancelled.
   *
   * If duplicate shipment IDs are provided in a single call, the API processes each unique ID only once.
   */
  async cancel(
    request: operations.CancelShipmentRequest,
    options?: RequestOptions,
  ): Promise<operations.CancelShipmentResponse> {
    return unwrapAsync(shipmentsCancel(
      this,
      request,
      options,
    ));
  }

  /**
   * Dispatch a new shipment
   *
   * @remarks
   * Send a shipment to one or multiple recipients in a single request. Provide a `Shipment` object. The object includes properties that define the shipment (recipient details, included documents, and optional settings). Some fields are required.
   *
   * The system accepts up to **50** recipients per call. For larger volumes, split the operation into multiple requests.
   */
  async dispatch(
    request: models.Shipment,
    options?: RequestOptions,
  ): Promise<operations.ShipmentDispatchResponse> {
    return unwrapAsync(shipmentsDispatch(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve documents related to a shipment
   *
   * @remarks
   * Download documents related to a shipment by its `id`. Pass the unique shipment `id` (returned when the shipment was created) as a parameter. The second parameter is the document type to download. Supported document types include: dispatch certificate, envelope template, and EPO (in PDF or XML formats).
   */
  async documents(
    request: operations.GetDocumentsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetDocumentsResponse> {
    return unwrapAsync(shipmentsDocuments(
      this,
      request,
      options,
    ));
  }

  /**
   * Check the shipment price
   *
   * @remarks
   * Check the price of a shipment for one or multiple recipients. Provide a `Shipment` object in the request. Each object includes properties such as recipient details, included documents, and optional settings. Some fields are required.
   *
   * The system accepts up to **50** recipients per call. For larger volumes, split the operation into multiple requests.
   */
  async price(
    request: models.Shipment,
    options?: RequestOptions,
  ): Promise<operations.ShipmentPriceResponse> {
    return unwrapAsync(shipmentsPrice(
      this,
      request,
      options,
    ));
  }
}
