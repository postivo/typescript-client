/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { addressBookContactsByExtIdAddToGroup } from "../funcs/addressBookContactsByExtIdAddToGroup.js";
import { addressBookContactsByExtIdDelete } from "../funcs/addressBookContactsByExtIdDelete.js";
import { addressBookContactsByExtIdGet } from "../funcs/addressBookContactsByExtIdGet.js";
import { addressBookContactsByExtIdRemoveFromGroup } from "../funcs/addressBookContactsByExtIdRemoveFromGroup.js";
import { addressBookContactsByExtIdUpdate } from "../funcs/addressBookContactsByExtIdUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ByExtId extends ClientSDK {
  /**
   * Retrieve contact details by EXT_ID
   *
   * @remarks
   * Get the details of a contact from your Address Book using your external (custom) ID (the value you defined when creating the contact).
   */
  async get(
    request: operations.GetContactByExternalIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetContactByExternalIdResponse> {
    return unwrapAsync(addressBookContactsByExtIdGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a contact by EXT_ID
   *
   * @remarks
   * Update a contact by its external (custom) ID - the value you defined when creating the contact.
   */
  async update(
    request: operations.UpdateContactByExternalIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateContactByExternalIdResponse> {
    return unwrapAsync(addressBookContactsByExtIdUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a contact by EXT_ID
   *
   * @remarks
   * Remove a contact from your account by its external (custom) ID - the value defined when the contact was created.
   */
  async delete(
    request: operations.DeleteContactByExternalIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteContactByExternalIdResponse | undefined> {
    return unwrapAsync(addressBookContactsByExtIdDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a contact from a group by EXT_ID
   *
   * @remarks
   * Remove a contact from a group in your Address Book using the contact’s external (custom) ID. This operation does not delete the contact; it only detaches the contact from the group. Provide the contact’s `ext_id` and the group’s `group_id` parameters to perform the detachment.
   */
  async removeFromGroup(
    request: operations.RemoveContactByExtIdToGroupRequest,
    options?: RequestOptions,
  ): Promise<operations.RemoveContactByExtIdToGroupResponse | undefined> {
    return unwrapAsync(addressBookContactsByExtIdRemoveFromGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a contact to a group by EXT_ID
   *
   * @remarks
   * Assign a contact to a group using the contact’s external (custom) ID (assigned when creating the contact). If a contact and a group exist in your account, you can add the contact to that group.
   *
   * Provide the contact’s `ext_id` and the group’s `group_id` parameters to perform the assignment.
   */
  async addToGroup(
    request: operations.AddContactByExtIdToGroupRequest,
    options?: RequestOptions,
  ): Promise<operations.AddContactByExtIdToGroupResponse | undefined> {
    return unwrapAsync(addressBookContactsByExtIdAddToGroup(
      this,
      request,
      options,
    ));
  }
}
