/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Recipient,
  Recipient$inboundSchema,
  Recipient$Outbound,
  Recipient$outboundSchema,
} from "./recipient.js";
import {
  Sender,
  Sender$inboundSchema,
  Sender$Outbound,
  Sender$outboundSchema,
} from "./sender.js";

/**
 * Shipment processing status.
 */
export type ShipmentPriceStatus = {
  /**
   * Indicates whether an error occurred during processing.
   */
  error?: boolean | undefined;
  /**
   * Status code.
   */
  code?: string | undefined;
  /**
   * Status description.
   */
  description?: string | undefined;
  /**
   * Status timestamp (UTC).
   */
  date?: Date | undefined;
};

/**
 * Postal operator that will handle the shipment.
 */
export type ShipmentPriceCarrier = {
  /**
   * Postal operator ID.
   */
  id?: number | null | undefined;
  /**
   * Postal operator name.
   */
  name?: string | null | undefined;
};

/**
 * Service (shipment type) selected.
 */
export type ShipmentPriceService = {
  /**
   * Service type ID (shipment/letter type).
   */
  id?: number | null | undefined;
  /**
   * Service type name (shipment/letter type).
   */
  name?: string | null | undefined;
};

/**
 * Pricing details for a single shipment
 */
export type ShipmentPrice = {
  /**
   * Recipient data for a shipment, including full postal address.
   */
  recipient?: Recipient | undefined;
  /**
   * Sender data for the shipment.
   */
  sender?: Sender | undefined;
  /**
   * Shipment processing status.
   */
  status?: ShipmentPriceStatus | undefined;
  /**
   * Postal operator that will handle the shipment.
   */
  carrier?: ShipmentPriceCarrier | undefined;
  /**
   * Service (shipment type) selected.
   */
  service?: ShipmentPriceService | undefined;
  /**
   * Total number of pages across all documents in the shipment.
   */
  pageNumber?: number | undefined;
  /**
   * Shipment price (PLN).
   */
  price?: number | undefined;
};

/** @internal */
export const ShipmentPriceStatus$inboundSchema: z.ZodType<
  ShipmentPriceStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.boolean().optional(),
  code: z.string().optional(),
  description: z.string().optional(),
  date: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type ShipmentPriceStatus$Outbound = {
  error?: boolean | undefined;
  code?: string | undefined;
  description?: string | undefined;
  date?: string | undefined;
};

/** @internal */
export const ShipmentPriceStatus$outboundSchema: z.ZodType<
  ShipmentPriceStatus$Outbound,
  z.ZodTypeDef,
  ShipmentPriceStatus
> = z.object({
  error: z.boolean().optional(),
  code: z.string().optional(),
  description: z.string().optional(),
  date: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShipmentPriceStatus$ {
  /** @deprecated use `ShipmentPriceStatus$inboundSchema` instead. */
  export const inboundSchema = ShipmentPriceStatus$inboundSchema;
  /** @deprecated use `ShipmentPriceStatus$outboundSchema` instead. */
  export const outboundSchema = ShipmentPriceStatus$outboundSchema;
  /** @deprecated use `ShipmentPriceStatus$Outbound` instead. */
  export type Outbound = ShipmentPriceStatus$Outbound;
}

export function shipmentPriceStatusToJSON(
  shipmentPriceStatus: ShipmentPriceStatus,
): string {
  return JSON.stringify(
    ShipmentPriceStatus$outboundSchema.parse(shipmentPriceStatus),
  );
}

export function shipmentPriceStatusFromJSON(
  jsonString: string,
): SafeParseResult<ShipmentPriceStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShipmentPriceStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShipmentPriceStatus' from JSON`,
  );
}

/** @internal */
export const ShipmentPriceCarrier$inboundSchema: z.ZodType<
  ShipmentPriceCarrier,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.number().int()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type ShipmentPriceCarrier$Outbound = {
  id?: number | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const ShipmentPriceCarrier$outboundSchema: z.ZodType<
  ShipmentPriceCarrier$Outbound,
  z.ZodTypeDef,
  ShipmentPriceCarrier
> = z.object({
  id: z.nullable(z.number().int()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShipmentPriceCarrier$ {
  /** @deprecated use `ShipmentPriceCarrier$inboundSchema` instead. */
  export const inboundSchema = ShipmentPriceCarrier$inboundSchema;
  /** @deprecated use `ShipmentPriceCarrier$outboundSchema` instead. */
  export const outboundSchema = ShipmentPriceCarrier$outboundSchema;
  /** @deprecated use `ShipmentPriceCarrier$Outbound` instead. */
  export type Outbound = ShipmentPriceCarrier$Outbound;
}

export function shipmentPriceCarrierToJSON(
  shipmentPriceCarrier: ShipmentPriceCarrier,
): string {
  return JSON.stringify(
    ShipmentPriceCarrier$outboundSchema.parse(shipmentPriceCarrier),
  );
}

export function shipmentPriceCarrierFromJSON(
  jsonString: string,
): SafeParseResult<ShipmentPriceCarrier, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShipmentPriceCarrier$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShipmentPriceCarrier' from JSON`,
  );
}

/** @internal */
export const ShipmentPriceService$inboundSchema: z.ZodType<
  ShipmentPriceService,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.number().int()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type ShipmentPriceService$Outbound = {
  id?: number | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const ShipmentPriceService$outboundSchema: z.ZodType<
  ShipmentPriceService$Outbound,
  z.ZodTypeDef,
  ShipmentPriceService
> = z.object({
  id: z.nullable(z.number().int()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShipmentPriceService$ {
  /** @deprecated use `ShipmentPriceService$inboundSchema` instead. */
  export const inboundSchema = ShipmentPriceService$inboundSchema;
  /** @deprecated use `ShipmentPriceService$outboundSchema` instead. */
  export const outboundSchema = ShipmentPriceService$outboundSchema;
  /** @deprecated use `ShipmentPriceService$Outbound` instead. */
  export type Outbound = ShipmentPriceService$Outbound;
}

export function shipmentPriceServiceToJSON(
  shipmentPriceService: ShipmentPriceService,
): string {
  return JSON.stringify(
    ShipmentPriceService$outboundSchema.parse(shipmentPriceService),
  );
}

export function shipmentPriceServiceFromJSON(
  jsonString: string,
): SafeParseResult<ShipmentPriceService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShipmentPriceService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShipmentPriceService' from JSON`,
  );
}

/** @internal */
export const ShipmentPrice$inboundSchema: z.ZodType<
  ShipmentPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipient: Recipient$inboundSchema.optional(),
  sender: Sender$inboundSchema.optional(),
  status: z.lazy(() => ShipmentPriceStatus$inboundSchema).optional(),
  carrier: z.lazy(() => ShipmentPriceCarrier$inboundSchema).optional(),
  service: z.lazy(() => ShipmentPriceService$inboundSchema).optional(),
  page_number: z.number().int().optional(),
  price: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "page_number": "pageNumber",
  });
});

/** @internal */
export type ShipmentPrice$Outbound = {
  recipient?: Recipient$Outbound | undefined;
  sender?: Sender$Outbound | undefined;
  status?: ShipmentPriceStatus$Outbound | undefined;
  carrier?: ShipmentPriceCarrier$Outbound | undefined;
  service?: ShipmentPriceService$Outbound | undefined;
  page_number?: number | undefined;
  price?: number | undefined;
};

/** @internal */
export const ShipmentPrice$outboundSchema: z.ZodType<
  ShipmentPrice$Outbound,
  z.ZodTypeDef,
  ShipmentPrice
> = z.object({
  recipient: Recipient$outboundSchema.optional(),
  sender: Sender$outboundSchema.optional(),
  status: z.lazy(() => ShipmentPriceStatus$outboundSchema).optional(),
  carrier: z.lazy(() => ShipmentPriceCarrier$outboundSchema).optional(),
  service: z.lazy(() => ShipmentPriceService$outboundSchema).optional(),
  pageNumber: z.number().int().optional(),
  price: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    pageNumber: "page_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShipmentPrice$ {
  /** @deprecated use `ShipmentPrice$inboundSchema` instead. */
  export const inboundSchema = ShipmentPrice$inboundSchema;
  /** @deprecated use `ShipmentPrice$outboundSchema` instead. */
  export const outboundSchema = ShipmentPrice$outboundSchema;
  /** @deprecated use `ShipmentPrice$Outbound` instead. */
  export type Outbound = ShipmentPrice$Outbound;
}

export function shipmentPriceToJSON(shipmentPrice: ShipmentPrice): string {
  return JSON.stringify(ShipmentPrice$outboundSchema.parse(shipmentPrice));
}

export function shipmentPriceFromJSON(
  jsonString: string,
): SafeParseResult<ShipmentPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShipmentPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShipmentPrice' from JSON`,
  );
}
