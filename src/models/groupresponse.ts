/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Address Book group details returned by the API.
 */
export type GroupResponse = {
  /**
   * Group name.
   */
  name: string;
  /**
   * Optional group description.
   */
  description?: string | null | undefined;
  /**
   * Unique system-assigned group ID.
   */
  id: number;
  /**
   * Indicates whether the group data was inherited from a main accountâ€™s shared Address Book.
   */
  inherited?: boolean | undefined;
};

/** @internal */
export const GroupResponse$inboundSchema: z.ZodType<
  GroupResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  id: z.number().int(),
  inherited: z.boolean().optional(),
});

/** @internal */
export type GroupResponse$Outbound = {
  name: string;
  description?: string | null | undefined;
  id: number;
  inherited?: boolean | undefined;
};

/** @internal */
export const GroupResponse$outboundSchema: z.ZodType<
  GroupResponse$Outbound,
  z.ZodTypeDef,
  GroupResponse
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  id: z.number().int(),
  inherited: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GroupResponse$ {
  /** @deprecated use `GroupResponse$inboundSchema` instead. */
  export const inboundSchema = GroupResponse$inboundSchema;
  /** @deprecated use `GroupResponse$outboundSchema` instead. */
  export const outboundSchema = GroupResponse$outboundSchema;
  /** @deprecated use `GroupResponse$Outbound` instead. */
  export type Outbound = GroupResponse$Outbound;
}

export function groupResponseToJSON(groupResponse: GroupResponse): string {
  return JSON.stringify(GroupResponse$outboundSchema.parse(groupResponse));
}

export function groupResponseFromJSON(
  jsonString: string,
): SafeParseResult<GroupResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GroupResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GroupResponse' from JSON`,
  );
}
