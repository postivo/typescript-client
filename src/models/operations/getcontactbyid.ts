/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetContactByIdRequest = {
  /**
   * Global contact `id` to fetch.
   */
  id: number;
};

export type GetContactByIdResponse =
  | models.ContactResponse
  | models.ErrorResponse;

/** @internal */
export const GetContactByIdRequest$inboundSchema: z.ZodType<
  GetContactByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
});

/** @internal */
export type GetContactByIdRequest$Outbound = {
  id: number;
};

/** @internal */
export const GetContactByIdRequest$outboundSchema: z.ZodType<
  GetContactByIdRequest$Outbound,
  z.ZodTypeDef,
  GetContactByIdRequest
> = z.object({
  id: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactByIdRequest$ {
  /** @deprecated use `GetContactByIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetContactByIdRequest$inboundSchema;
  /** @deprecated use `GetContactByIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetContactByIdRequest$outboundSchema;
  /** @deprecated use `GetContactByIdRequest$Outbound` instead. */
  export type Outbound = GetContactByIdRequest$Outbound;
}

export function getContactByIdRequestToJSON(
  getContactByIdRequest: GetContactByIdRequest,
): string {
  return JSON.stringify(
    GetContactByIdRequest$outboundSchema.parse(getContactByIdRequest),
  );
}

export function getContactByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetContactByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactByIdRequest' from JSON`,
  );
}

/** @internal */
export const GetContactByIdResponse$inboundSchema: z.ZodType<
  GetContactByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ContactResponse$inboundSchema,
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type GetContactByIdResponse$Outbound =
  | models.ContactResponse$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const GetContactByIdResponse$outboundSchema: z.ZodType<
  GetContactByIdResponse$Outbound,
  z.ZodTypeDef,
  GetContactByIdResponse
> = z.union([
  models.ContactResponse$outboundSchema,
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactByIdResponse$ {
  /** @deprecated use `GetContactByIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetContactByIdResponse$inboundSchema;
  /** @deprecated use `GetContactByIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetContactByIdResponse$outboundSchema;
  /** @deprecated use `GetContactByIdResponse$Outbound` instead. */
  export type Outbound = GetContactByIdResponse$Outbound;
}

export function getContactByIdResponseToJSON(
  getContactByIdResponse: GetContactByIdResponse,
): string {
  return JSON.stringify(
    GetContactByIdResponse$outboundSchema.parse(getContactByIdResponse),
  );
}

export function getContactByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetContactByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactByIdResponse' from JSON`,
  );
}
