/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CancelShipmentRequest = {
  /**
   * Shipment IDs assigned by the system (comma-separated). The system accepts a maximum of **50** identifiers per call.
   */
  ids: Array<string>;
};

export type CancelShipmentResponseResult =
  | Array<models.ShipmentCancellation>
  | models.ErrorResponse;

export type CancelShipmentResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<models.ShipmentCancellation> | models.ErrorResponse;
};

/** @internal */
export const CancelShipmentRequest$inboundSchema: z.ZodType<
  CancelShipmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()),
});

/** @internal */
export type CancelShipmentRequest$Outbound = {
  ids: Array<string>;
};

/** @internal */
export const CancelShipmentRequest$outboundSchema: z.ZodType<
  CancelShipmentRequest$Outbound,
  z.ZodTypeDef,
  CancelShipmentRequest
> = z.object({
  ids: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelShipmentRequest$ {
  /** @deprecated use `CancelShipmentRequest$inboundSchema` instead. */
  export const inboundSchema = CancelShipmentRequest$inboundSchema;
  /** @deprecated use `CancelShipmentRequest$outboundSchema` instead. */
  export const outboundSchema = CancelShipmentRequest$outboundSchema;
  /** @deprecated use `CancelShipmentRequest$Outbound` instead. */
  export type Outbound = CancelShipmentRequest$Outbound;
}

export function cancelShipmentRequestToJSON(
  cancelShipmentRequest: CancelShipmentRequest,
): string {
  return JSON.stringify(
    CancelShipmentRequest$outboundSchema.parse(cancelShipmentRequest),
  );
}

export function cancelShipmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<CancelShipmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelShipmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelShipmentRequest' from JSON`,
  );
}

/** @internal */
export const CancelShipmentResponseResult$inboundSchema: z.ZodType<
  CancelShipmentResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(models.ShipmentCancellation$inboundSchema),
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type CancelShipmentResponseResult$Outbound =
  | Array<models.ShipmentCancellation$Outbound>
  | models.ErrorResponse$Outbound;

/** @internal */
export const CancelShipmentResponseResult$outboundSchema: z.ZodType<
  CancelShipmentResponseResult$Outbound,
  z.ZodTypeDef,
  CancelShipmentResponseResult
> = z.union([
  z.array(models.ShipmentCancellation$outboundSchema),
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelShipmentResponseResult$ {
  /** @deprecated use `CancelShipmentResponseResult$inboundSchema` instead. */
  export const inboundSchema = CancelShipmentResponseResult$inboundSchema;
  /** @deprecated use `CancelShipmentResponseResult$outboundSchema` instead. */
  export const outboundSchema = CancelShipmentResponseResult$outboundSchema;
  /** @deprecated use `CancelShipmentResponseResult$Outbound` instead. */
  export type Outbound = CancelShipmentResponseResult$Outbound;
}

export function cancelShipmentResponseResultToJSON(
  cancelShipmentResponseResult: CancelShipmentResponseResult,
): string {
  return JSON.stringify(
    CancelShipmentResponseResult$outboundSchema.parse(
      cancelShipmentResponseResult,
    ),
  );
}

export function cancelShipmentResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<CancelShipmentResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelShipmentResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelShipmentResponseResult' from JSON`,
  );
}

/** @internal */
export const CancelShipmentResponse$inboundSchema: z.ZodType<
  CancelShipmentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    z.array(models.ShipmentCancellation$inboundSchema),
    models.ErrorResponse$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CancelShipmentResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result:
    | Array<models.ShipmentCancellation$Outbound>
    | models.ErrorResponse$Outbound;
};

/** @internal */
export const CancelShipmentResponse$outboundSchema: z.ZodType<
  CancelShipmentResponse$Outbound,
  z.ZodTypeDef,
  CancelShipmentResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    z.array(models.ShipmentCancellation$outboundSchema),
    models.ErrorResponse$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelShipmentResponse$ {
  /** @deprecated use `CancelShipmentResponse$inboundSchema` instead. */
  export const inboundSchema = CancelShipmentResponse$inboundSchema;
  /** @deprecated use `CancelShipmentResponse$outboundSchema` instead. */
  export const outboundSchema = CancelShipmentResponse$outboundSchema;
  /** @deprecated use `CancelShipmentResponse$Outbound` instead. */
  export type Outbound = CancelShipmentResponse$Outbound;
}

export function cancelShipmentResponseToJSON(
  cancelShipmentResponse: CancelShipmentResponse,
): string {
  return JSON.stringify(
    CancelShipmentResponse$outboundSchema.parse(cancelShipmentResponse),
  );
}

export function cancelShipmentResponseFromJSON(
  jsonString: string,
): SafeParseResult<CancelShipmentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelShipmentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelShipmentResponse' from JSON`,
  );
}
