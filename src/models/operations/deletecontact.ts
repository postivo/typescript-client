/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DeleteContactRequest = {
  /**
   * Global contact `id` to remove.
   */
  id: number;
};

export type DeleteContactResponse = {
  headers: { [k: string]: Array<string> };
  result: models.ErrorResponse;
};

/** @internal */
export const DeleteContactRequest$inboundSchema: z.ZodType<
  DeleteContactRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
});

/** @internal */
export type DeleteContactRequest$Outbound = {
  id: number;
};

/** @internal */
export const DeleteContactRequest$outboundSchema: z.ZodType<
  DeleteContactRequest$Outbound,
  z.ZodTypeDef,
  DeleteContactRequest
> = z.object({
  id: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteContactRequest$ {
  /** @deprecated use `DeleteContactRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteContactRequest$inboundSchema;
  /** @deprecated use `DeleteContactRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteContactRequest$outboundSchema;
  /** @deprecated use `DeleteContactRequest$Outbound` instead. */
  export type Outbound = DeleteContactRequest$Outbound;
}

export function deleteContactRequestToJSON(
  deleteContactRequest: DeleteContactRequest,
): string {
  return JSON.stringify(
    DeleteContactRequest$outboundSchema.parse(deleteContactRequest),
  );
}

export function deleteContactRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteContactRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteContactRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteContactRequest' from JSON`,
  );
}

/** @internal */
export const DeleteContactResponse$inboundSchema: z.ZodType<
  DeleteContactResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: models.ErrorResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type DeleteContactResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: models.ErrorResponse$Outbound;
};

/** @internal */
export const DeleteContactResponse$outboundSchema: z.ZodType<
  DeleteContactResponse$Outbound,
  z.ZodTypeDef,
  DeleteContactResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: models.ErrorResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteContactResponse$ {
  /** @deprecated use `DeleteContactResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteContactResponse$inboundSchema;
  /** @deprecated use `DeleteContactResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteContactResponse$outboundSchema;
  /** @deprecated use `DeleteContactResponse$Outbound` instead. */
  export type Outbound = DeleteContactResponse$Outbound;
}

export function deleteContactResponseToJSON(
  deleteContactResponse: DeleteContactResponse,
): string {
  return JSON.stringify(
    DeleteContactResponse$outboundSchema.parse(deleteContactResponse),
  );
}

export function deleteContactResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteContactResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteContactResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteContactResponse' from JSON`,
  );
}
