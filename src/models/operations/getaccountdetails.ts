/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetAccountDetailsResponse =
  | models.AccountResponse
  | models.ErrorResponse;

/** @internal */
export const GetAccountDetailsResponse$inboundSchema: z.ZodType<
  GetAccountDetailsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.AccountResponse$inboundSchema,
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type GetAccountDetailsResponse$Outbound =
  | models.AccountResponse$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const GetAccountDetailsResponse$outboundSchema: z.ZodType<
  GetAccountDetailsResponse$Outbound,
  z.ZodTypeDef,
  GetAccountDetailsResponse
> = z.union([
  models.AccountResponse$outboundSchema,
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountDetailsResponse$ {
  /** @deprecated use `GetAccountDetailsResponse$inboundSchema` instead. */
  export const inboundSchema = GetAccountDetailsResponse$inboundSchema;
  /** @deprecated use `GetAccountDetailsResponse$outboundSchema` instead. */
  export const outboundSchema = GetAccountDetailsResponse$outboundSchema;
  /** @deprecated use `GetAccountDetailsResponse$Outbound` instead. */
  export type Outbound = GetAccountDetailsResponse$Outbound;
}

export function getAccountDetailsResponseToJSON(
  getAccountDetailsResponse: GetAccountDetailsResponse,
): string {
  return JSON.stringify(
    GetAccountDetailsResponse$outboundSchema.parse(getAccountDetailsResponse),
  );
}

export function getAccountDetailsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAccountDetailsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAccountDetailsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAccountDetailsResponse' from JSON`,
  );
}
