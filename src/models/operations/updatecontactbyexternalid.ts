/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateContactByExternalIdRequest = {
  /**
   * External (custom) ID of the contact to update.
   */
  extId: string;
  /**
   * A `Contact` object with the updated fields.
   */
  contact: models.Contact;
};

export type UpdateContactByExternalIdResponseResult =
  | models.ContactResponse
  | models.ErrorResponse;

export type UpdateContactByExternalIdResponse = {
  headers: { [k: string]: Array<string> };
  result: models.ContactResponse | models.ErrorResponse;
};

/** @internal */
export const UpdateContactByExternalIdRequest$inboundSchema: z.ZodType<
  UpdateContactByExternalIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ext_id: z.string(),
  Contact: models.Contact$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "ext_id": "extId",
    "Contact": "contact",
  });
});

/** @internal */
export type UpdateContactByExternalIdRequest$Outbound = {
  ext_id: string;
  Contact: models.Contact$Outbound;
};

/** @internal */
export const UpdateContactByExternalIdRequest$outboundSchema: z.ZodType<
  UpdateContactByExternalIdRequest$Outbound,
  z.ZodTypeDef,
  UpdateContactByExternalIdRequest
> = z.object({
  extId: z.string(),
  contact: models.Contact$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    extId: "ext_id",
    contact: "Contact",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactByExternalIdRequest$ {
  /** @deprecated use `UpdateContactByExternalIdRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateContactByExternalIdRequest$inboundSchema;
  /** @deprecated use `UpdateContactByExternalIdRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateContactByExternalIdRequest$outboundSchema;
  /** @deprecated use `UpdateContactByExternalIdRequest$Outbound` instead. */
  export type Outbound = UpdateContactByExternalIdRequest$Outbound;
}

export function updateContactByExternalIdRequestToJSON(
  updateContactByExternalIdRequest: UpdateContactByExternalIdRequest,
): string {
  return JSON.stringify(
    UpdateContactByExternalIdRequest$outboundSchema.parse(
      updateContactByExternalIdRequest,
    ),
  );
}

export function updateContactByExternalIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactByExternalIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactByExternalIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactByExternalIdRequest' from JSON`,
  );
}

/** @internal */
export const UpdateContactByExternalIdResponseResult$inboundSchema: z.ZodType<
  UpdateContactByExternalIdResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ContactResponse$inboundSchema,
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type UpdateContactByExternalIdResponseResult$Outbound =
  | models.ContactResponse$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const UpdateContactByExternalIdResponseResult$outboundSchema: z.ZodType<
  UpdateContactByExternalIdResponseResult$Outbound,
  z.ZodTypeDef,
  UpdateContactByExternalIdResponseResult
> = z.union([
  models.ContactResponse$outboundSchema,
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactByExternalIdResponseResult$ {
  /** @deprecated use `UpdateContactByExternalIdResponseResult$inboundSchema` instead. */
  export const inboundSchema =
    UpdateContactByExternalIdResponseResult$inboundSchema;
  /** @deprecated use `UpdateContactByExternalIdResponseResult$outboundSchema` instead. */
  export const outboundSchema =
    UpdateContactByExternalIdResponseResult$outboundSchema;
  /** @deprecated use `UpdateContactByExternalIdResponseResult$Outbound` instead. */
  export type Outbound = UpdateContactByExternalIdResponseResult$Outbound;
}

export function updateContactByExternalIdResponseResultToJSON(
  updateContactByExternalIdResponseResult:
    UpdateContactByExternalIdResponseResult,
): string {
  return JSON.stringify(
    UpdateContactByExternalIdResponseResult$outboundSchema.parse(
      updateContactByExternalIdResponseResult,
    ),
  );
}

export function updateContactByExternalIdResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateContactByExternalIdResponseResult,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateContactByExternalIdResponseResult$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateContactByExternalIdResponseResult' from JSON`,
  );
}

/** @internal */
export const UpdateContactByExternalIdResponse$inboundSchema: z.ZodType<
  UpdateContactByExternalIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    models.ContactResponse$inboundSchema,
    models.ErrorResponse$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateContactByExternalIdResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: models.ContactResponse$Outbound | models.ErrorResponse$Outbound;
};

/** @internal */
export const UpdateContactByExternalIdResponse$outboundSchema: z.ZodType<
  UpdateContactByExternalIdResponse$Outbound,
  z.ZodTypeDef,
  UpdateContactByExternalIdResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    models.ContactResponse$outboundSchema,
    models.ErrorResponse$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactByExternalIdResponse$ {
  /** @deprecated use `UpdateContactByExternalIdResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateContactByExternalIdResponse$inboundSchema;
  /** @deprecated use `UpdateContactByExternalIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateContactByExternalIdResponse$outboundSchema;
  /** @deprecated use `UpdateContactByExternalIdResponse$Outbound` instead. */
  export type Outbound = UpdateContactByExternalIdResponse$Outbound;
}

export function updateContactByExternalIdResponseToJSON(
  updateContactByExternalIdResponse: UpdateContactByExternalIdResponse,
): string {
  return JSON.stringify(
    UpdateContactByExternalIdResponse$outboundSchema.parse(
      updateContactByExternalIdResponse,
    ),
  );
}

export function updateContactByExternalIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactByExternalIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactByExternalIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactByExternalIdResponse' from JSON`,
  );
}
