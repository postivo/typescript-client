/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AddContactResponseResult =
  | models.ContactResponse
  | models.ErrorResponse;

export type AddContactResponse = {
  headers: { [k: string]: Array<string> };
  result: models.ContactResponse | models.ErrorResponse;
};

/** @internal */
export const AddContactResponseResult$inboundSchema: z.ZodType<
  AddContactResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ContactResponse$inboundSchema,
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type AddContactResponseResult$Outbound =
  | models.ContactResponse$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const AddContactResponseResult$outboundSchema: z.ZodType<
  AddContactResponseResult$Outbound,
  z.ZodTypeDef,
  AddContactResponseResult
> = z.union([
  models.ContactResponse$outboundSchema,
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddContactResponseResult$ {
  /** @deprecated use `AddContactResponseResult$inboundSchema` instead. */
  export const inboundSchema = AddContactResponseResult$inboundSchema;
  /** @deprecated use `AddContactResponseResult$outboundSchema` instead. */
  export const outboundSchema = AddContactResponseResult$outboundSchema;
  /** @deprecated use `AddContactResponseResult$Outbound` instead. */
  export type Outbound = AddContactResponseResult$Outbound;
}

export function addContactResponseResultToJSON(
  addContactResponseResult: AddContactResponseResult,
): string {
  return JSON.stringify(
    AddContactResponseResult$outboundSchema.parse(addContactResponseResult),
  );
}

export function addContactResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<AddContactResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddContactResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddContactResponseResult' from JSON`,
  );
}

/** @internal */
export const AddContactResponse$inboundSchema: z.ZodType<
  AddContactResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    models.ContactResponse$inboundSchema,
    models.ErrorResponse$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type AddContactResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: models.ContactResponse$Outbound | models.ErrorResponse$Outbound;
};

/** @internal */
export const AddContactResponse$outboundSchema: z.ZodType<
  AddContactResponse$Outbound,
  z.ZodTypeDef,
  AddContactResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    models.ContactResponse$outboundSchema,
    models.ErrorResponse$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddContactResponse$ {
  /** @deprecated use `AddContactResponse$inboundSchema` instead. */
  export const inboundSchema = AddContactResponse$inboundSchema;
  /** @deprecated use `AddContactResponse$outboundSchema` instead. */
  export const outboundSchema = AddContactResponse$outboundSchema;
  /** @deprecated use `AddContactResponse$Outbound` instead. */
  export type Outbound = AddContactResponse$Outbound;
}

export function addContactResponseToJSON(
  addContactResponse: AddContactResponse,
): string {
  return JSON.stringify(
    AddContactResponse$outboundSchema.parse(addContactResponse),
  );
}

export function addContactResponseFromJSON(
  jsonString: string,
): SafeParseResult<AddContactResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddContactResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddContactResponse' from JSON`,
  );
}
