/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateGroupRequest = {
  /**
   * Group `id` to update.
   */
  id: number;
  /**
   * A `Group` object with the updated fields.
   */
  group: models.Group;
};

export type UpdateGroupResponseResult =
  | models.GroupResponse
  | models.ErrorResponse;

export type UpdateGroupResponse = {
  headers: { [k: string]: Array<string> };
  result: models.GroupResponse | models.ErrorResponse;
};

/** @internal */
export const UpdateGroupRequest$inboundSchema: z.ZodType<
  UpdateGroupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  Group: models.Group$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Group": "group",
  });
});

/** @internal */
export type UpdateGroupRequest$Outbound = {
  id: number;
  Group: models.Group$Outbound;
};

/** @internal */
export const UpdateGroupRequest$outboundSchema: z.ZodType<
  UpdateGroupRequest$Outbound,
  z.ZodTypeDef,
  UpdateGroupRequest
> = z.object({
  id: z.number().int(),
  group: models.Group$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    group: "Group",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGroupRequest$ {
  /** @deprecated use `UpdateGroupRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateGroupRequest$inboundSchema;
  /** @deprecated use `UpdateGroupRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateGroupRequest$outboundSchema;
  /** @deprecated use `UpdateGroupRequest$Outbound` instead. */
  export type Outbound = UpdateGroupRequest$Outbound;
}

export function updateGroupRequestToJSON(
  updateGroupRequest: UpdateGroupRequest,
): string {
  return JSON.stringify(
    UpdateGroupRequest$outboundSchema.parse(updateGroupRequest),
  );
}

export function updateGroupRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGroupRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGroupRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGroupRequest' from JSON`,
  );
}

/** @internal */
export const UpdateGroupResponseResult$inboundSchema: z.ZodType<
  UpdateGroupResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.GroupResponse$inboundSchema,
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type UpdateGroupResponseResult$Outbound =
  | models.GroupResponse$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const UpdateGroupResponseResult$outboundSchema: z.ZodType<
  UpdateGroupResponseResult$Outbound,
  z.ZodTypeDef,
  UpdateGroupResponseResult
> = z.union([
  models.GroupResponse$outboundSchema,
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGroupResponseResult$ {
  /** @deprecated use `UpdateGroupResponseResult$inboundSchema` instead. */
  export const inboundSchema = UpdateGroupResponseResult$inboundSchema;
  /** @deprecated use `UpdateGroupResponseResult$outboundSchema` instead. */
  export const outboundSchema = UpdateGroupResponseResult$outboundSchema;
  /** @deprecated use `UpdateGroupResponseResult$Outbound` instead. */
  export type Outbound = UpdateGroupResponseResult$Outbound;
}

export function updateGroupResponseResultToJSON(
  updateGroupResponseResult: UpdateGroupResponseResult,
): string {
  return JSON.stringify(
    UpdateGroupResponseResult$outboundSchema.parse(updateGroupResponseResult),
  );
}

export function updateGroupResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGroupResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGroupResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGroupResponseResult' from JSON`,
  );
}

/** @internal */
export const UpdateGroupResponse$inboundSchema: z.ZodType<
  UpdateGroupResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    models.GroupResponse$inboundSchema,
    models.ErrorResponse$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateGroupResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: models.GroupResponse$Outbound | models.ErrorResponse$Outbound;
};

/** @internal */
export const UpdateGroupResponse$outboundSchema: z.ZodType<
  UpdateGroupResponse$Outbound,
  z.ZodTypeDef,
  UpdateGroupResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    models.GroupResponse$outboundSchema,
    models.ErrorResponse$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGroupResponse$ {
  /** @deprecated use `UpdateGroupResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateGroupResponse$inboundSchema;
  /** @deprecated use `UpdateGroupResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateGroupResponse$outboundSchema;
  /** @deprecated use `UpdateGroupResponse$Outbound` instead. */
  export type Outbound = UpdateGroupResponse$Outbound;
}

export function updateGroupResponseToJSON(
  updateGroupResponse: UpdateGroupResponse,
): string {
  return JSON.stringify(
    UpdateGroupResponse$outboundSchema.parse(updateGroupResponse),
  );
}

export function updateGroupResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGroupResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGroupResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGroupResponse' from JSON`,
  );
}
