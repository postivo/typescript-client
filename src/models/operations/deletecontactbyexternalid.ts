/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DeleteContactByExternalIdRequest = {
  /**
   * External (custom) ID of the contact to remove.
   */
  extId: string;
};

export type DeleteContactByExternalIdResponse = {
  headers: { [k: string]: Array<string> };
  result: models.ErrorResponse;
};

/** @internal */
export const DeleteContactByExternalIdRequest$inboundSchema: z.ZodType<
  DeleteContactByExternalIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ext_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "ext_id": "extId",
  });
});

/** @internal */
export type DeleteContactByExternalIdRequest$Outbound = {
  ext_id: string;
};

/** @internal */
export const DeleteContactByExternalIdRequest$outboundSchema: z.ZodType<
  DeleteContactByExternalIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteContactByExternalIdRequest
> = z.object({
  extId: z.string(),
}).transform((v) => {
  return remap$(v, {
    extId: "ext_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteContactByExternalIdRequest$ {
  /** @deprecated use `DeleteContactByExternalIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteContactByExternalIdRequest$inboundSchema;
  /** @deprecated use `DeleteContactByExternalIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteContactByExternalIdRequest$outboundSchema;
  /** @deprecated use `DeleteContactByExternalIdRequest$Outbound` instead. */
  export type Outbound = DeleteContactByExternalIdRequest$Outbound;
}

export function deleteContactByExternalIdRequestToJSON(
  deleteContactByExternalIdRequest: DeleteContactByExternalIdRequest,
): string {
  return JSON.stringify(
    DeleteContactByExternalIdRequest$outboundSchema.parse(
      deleteContactByExternalIdRequest,
    ),
  );
}

export function deleteContactByExternalIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteContactByExternalIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteContactByExternalIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteContactByExternalIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteContactByExternalIdResponse$inboundSchema: z.ZodType<
  DeleteContactByExternalIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: models.ErrorResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type DeleteContactByExternalIdResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: models.ErrorResponse$Outbound;
};

/** @internal */
export const DeleteContactByExternalIdResponse$outboundSchema: z.ZodType<
  DeleteContactByExternalIdResponse$Outbound,
  z.ZodTypeDef,
  DeleteContactByExternalIdResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: models.ErrorResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteContactByExternalIdResponse$ {
  /** @deprecated use `DeleteContactByExternalIdResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteContactByExternalIdResponse$inboundSchema;
  /** @deprecated use `DeleteContactByExternalIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    DeleteContactByExternalIdResponse$outboundSchema;
  /** @deprecated use `DeleteContactByExternalIdResponse$Outbound` instead. */
  export type Outbound = DeleteContactByExternalIdResponse$Outbound;
}

export function deleteContactByExternalIdResponseToJSON(
  deleteContactByExternalIdResponse: DeleteContactByExternalIdResponse,
): string {
  return JSON.stringify(
    DeleteContactByExternalIdResponse$outboundSchema.parse(
      deleteContactByExternalIdResponse,
    ),
  );
}

export function deleteContactByExternalIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteContactByExternalIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteContactByExternalIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteContactByExternalIdResponse' from JSON`,
  );
}
