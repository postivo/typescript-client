/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AddGroupResponseResult =
  | models.GroupResponse
  | models.ErrorResponse;

export type AddGroupResponse = {
  headers: { [k: string]: Array<string> };
  result: models.GroupResponse | models.ErrorResponse;
};

/** @internal */
export const AddGroupResponseResult$inboundSchema: z.ZodType<
  AddGroupResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.GroupResponse$inboundSchema,
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type AddGroupResponseResult$Outbound =
  | models.GroupResponse$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const AddGroupResponseResult$outboundSchema: z.ZodType<
  AddGroupResponseResult$Outbound,
  z.ZodTypeDef,
  AddGroupResponseResult
> = z.union([
  models.GroupResponse$outboundSchema,
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddGroupResponseResult$ {
  /** @deprecated use `AddGroupResponseResult$inboundSchema` instead. */
  export const inboundSchema = AddGroupResponseResult$inboundSchema;
  /** @deprecated use `AddGroupResponseResult$outboundSchema` instead. */
  export const outboundSchema = AddGroupResponseResult$outboundSchema;
  /** @deprecated use `AddGroupResponseResult$Outbound` instead. */
  export type Outbound = AddGroupResponseResult$Outbound;
}

export function addGroupResponseResultToJSON(
  addGroupResponseResult: AddGroupResponseResult,
): string {
  return JSON.stringify(
    AddGroupResponseResult$outboundSchema.parse(addGroupResponseResult),
  );
}

export function addGroupResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<AddGroupResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddGroupResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddGroupResponseResult' from JSON`,
  );
}

/** @internal */
export const AddGroupResponse$inboundSchema: z.ZodType<
  AddGroupResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    models.GroupResponse$inboundSchema,
    models.ErrorResponse$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type AddGroupResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: models.GroupResponse$Outbound | models.ErrorResponse$Outbound;
};

/** @internal */
export const AddGroupResponse$outboundSchema: z.ZodType<
  AddGroupResponse$Outbound,
  z.ZodTypeDef,
  AddGroupResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    models.GroupResponse$outboundSchema,
    models.ErrorResponse$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddGroupResponse$ {
  /** @deprecated use `AddGroupResponse$inboundSchema` instead. */
  export const inboundSchema = AddGroupResponse$inboundSchema;
  /** @deprecated use `AddGroupResponse$outboundSchema` instead. */
  export const outboundSchema = AddGroupResponse$outboundSchema;
  /** @deprecated use `AddGroupResponse$Outbound` instead. */
  export type Outbound = AddGroupResponse$Outbound;
}

export function addGroupResponseToJSON(
  addGroupResponse: AddGroupResponse,
): string {
  return JSON.stringify(
    AddGroupResponse$outboundSchema.parse(addGroupResponse),
  );
}

export function addGroupResponseFromJSON(
  jsonString: string,
): SafeParseResult<AddGroupResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddGroupResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddGroupResponse' from JSON`,
  );
}
