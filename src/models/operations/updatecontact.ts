/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateContactRequest = {
  /**
   * ID of the contact to update.
   */
  id: number;
  /**
   * A `Contact` object with the updated fields.
   */
  contact: models.Contact;
};

export type UpdateContactResponseResult =
  | models.ContactResponse
  | models.ErrorResponse;

export type UpdateContactResponse = {
  headers: { [k: string]: Array<string> };
  result: models.ContactResponse | models.ErrorResponse;
};

/** @internal */
export const UpdateContactRequest$inboundSchema: z.ZodType<
  UpdateContactRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  Contact: models.Contact$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Contact": "contact",
  });
});

/** @internal */
export type UpdateContactRequest$Outbound = {
  id: number;
  Contact: models.Contact$Outbound;
};

/** @internal */
export const UpdateContactRequest$outboundSchema: z.ZodType<
  UpdateContactRequest$Outbound,
  z.ZodTypeDef,
  UpdateContactRequest
> = z.object({
  id: z.number().int(),
  contact: models.Contact$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    contact: "Contact",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactRequest$ {
  /** @deprecated use `UpdateContactRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateContactRequest$inboundSchema;
  /** @deprecated use `UpdateContactRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateContactRequest$outboundSchema;
  /** @deprecated use `UpdateContactRequest$Outbound` instead. */
  export type Outbound = UpdateContactRequest$Outbound;
}

export function updateContactRequestToJSON(
  updateContactRequest: UpdateContactRequest,
): string {
  return JSON.stringify(
    UpdateContactRequest$outboundSchema.parse(updateContactRequest),
  );
}

export function updateContactRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactRequest' from JSON`,
  );
}

/** @internal */
export const UpdateContactResponseResult$inboundSchema: z.ZodType<
  UpdateContactResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ContactResponse$inboundSchema,
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type UpdateContactResponseResult$Outbound =
  | models.ContactResponse$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const UpdateContactResponseResult$outboundSchema: z.ZodType<
  UpdateContactResponseResult$Outbound,
  z.ZodTypeDef,
  UpdateContactResponseResult
> = z.union([
  models.ContactResponse$outboundSchema,
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactResponseResult$ {
  /** @deprecated use `UpdateContactResponseResult$inboundSchema` instead. */
  export const inboundSchema = UpdateContactResponseResult$inboundSchema;
  /** @deprecated use `UpdateContactResponseResult$outboundSchema` instead. */
  export const outboundSchema = UpdateContactResponseResult$outboundSchema;
  /** @deprecated use `UpdateContactResponseResult$Outbound` instead. */
  export type Outbound = UpdateContactResponseResult$Outbound;
}

export function updateContactResponseResultToJSON(
  updateContactResponseResult: UpdateContactResponseResult,
): string {
  return JSON.stringify(
    UpdateContactResponseResult$outboundSchema.parse(
      updateContactResponseResult,
    ),
  );
}

export function updateContactResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactResponseResult' from JSON`,
  );
}

/** @internal */
export const UpdateContactResponse$inboundSchema: z.ZodType<
  UpdateContactResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    models.ContactResponse$inboundSchema,
    models.ErrorResponse$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type UpdateContactResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: models.ContactResponse$Outbound | models.ErrorResponse$Outbound;
};

/** @internal */
export const UpdateContactResponse$outboundSchema: z.ZodType<
  UpdateContactResponse$Outbound,
  z.ZodTypeDef,
  UpdateContactResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    models.ContactResponse$outboundSchema,
    models.ErrorResponse$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContactResponse$ {
  /** @deprecated use `UpdateContactResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateContactResponse$inboundSchema;
  /** @deprecated use `UpdateContactResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateContactResponse$outboundSchema;
  /** @deprecated use `UpdateContactResponse$Outbound` instead. */
  export type Outbound = UpdateContactResponse$Outbound;
}

export function updateContactResponseToJSON(
  updateContactResponse: UpdateContactResponse,
): string {
  return JSON.stringify(
    UpdateContactResponse$outboundSchema.parse(updateContactResponse),
  );
}

export function updateContactResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateContactResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateContactResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateContactResponse' from JSON`,
  );
}
