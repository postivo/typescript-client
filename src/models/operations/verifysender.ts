/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Verification code received in the letter.
 */
export type VerifySenderRequestBody = {
  verificationCode: string;
};

export type VerifySenderRequest = {
  /**
   * ID of the sender to verify.
   */
  id: number;
  /**
   * Verification code received in the letter.
   */
  requestBody: VerifySenderRequestBody;
};

export type VerifySenderResponse = {
  headers: { [k: string]: Array<string> };
  result: models.ErrorResponse;
};

/** @internal */
export const VerifySenderRequestBody$inboundSchema: z.ZodType<
  VerifySenderRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  verification_code: z.string(),
}).transform((v) => {
  return remap$(v, {
    "verification_code": "verificationCode",
  });
});

/** @internal */
export type VerifySenderRequestBody$Outbound = {
  verification_code: string;
};

/** @internal */
export const VerifySenderRequestBody$outboundSchema: z.ZodType<
  VerifySenderRequestBody$Outbound,
  z.ZodTypeDef,
  VerifySenderRequestBody
> = z.object({
  verificationCode: z.string(),
}).transform((v) => {
  return remap$(v, {
    verificationCode: "verification_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifySenderRequestBody$ {
  /** @deprecated use `VerifySenderRequestBody$inboundSchema` instead. */
  export const inboundSchema = VerifySenderRequestBody$inboundSchema;
  /** @deprecated use `VerifySenderRequestBody$outboundSchema` instead. */
  export const outboundSchema = VerifySenderRequestBody$outboundSchema;
  /** @deprecated use `VerifySenderRequestBody$Outbound` instead. */
  export type Outbound = VerifySenderRequestBody$Outbound;
}

export function verifySenderRequestBodyToJSON(
  verifySenderRequestBody: VerifySenderRequestBody,
): string {
  return JSON.stringify(
    VerifySenderRequestBody$outboundSchema.parse(verifySenderRequestBody),
  );
}

export function verifySenderRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VerifySenderRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifySenderRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifySenderRequestBody' from JSON`,
  );
}

/** @internal */
export const VerifySenderRequest$inboundSchema: z.ZodType<
  VerifySenderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  RequestBody: z.lazy(() => VerifySenderRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VerifySenderRequest$Outbound = {
  id: number;
  RequestBody: VerifySenderRequestBody$Outbound;
};

/** @internal */
export const VerifySenderRequest$outboundSchema: z.ZodType<
  VerifySenderRequest$Outbound,
  z.ZodTypeDef,
  VerifySenderRequest
> = z.object({
  id: z.number().int(),
  requestBody: z.lazy(() => VerifySenderRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifySenderRequest$ {
  /** @deprecated use `VerifySenderRequest$inboundSchema` instead. */
  export const inboundSchema = VerifySenderRequest$inboundSchema;
  /** @deprecated use `VerifySenderRequest$outboundSchema` instead. */
  export const outboundSchema = VerifySenderRequest$outboundSchema;
  /** @deprecated use `VerifySenderRequest$Outbound` instead. */
  export type Outbound = VerifySenderRequest$Outbound;
}

export function verifySenderRequestToJSON(
  verifySenderRequest: VerifySenderRequest,
): string {
  return JSON.stringify(
    VerifySenderRequest$outboundSchema.parse(verifySenderRequest),
  );
}

export function verifySenderRequestFromJSON(
  jsonString: string,
): SafeParseResult<VerifySenderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifySenderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifySenderRequest' from JSON`,
  );
}

/** @internal */
export const VerifySenderResponse$inboundSchema: z.ZodType<
  VerifySenderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: models.ErrorResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type VerifySenderResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: models.ErrorResponse$Outbound;
};

/** @internal */
export const VerifySenderResponse$outboundSchema: z.ZodType<
  VerifySenderResponse$Outbound,
  z.ZodTypeDef,
  VerifySenderResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: models.ErrorResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifySenderResponse$ {
  /** @deprecated use `VerifySenderResponse$inboundSchema` instead. */
  export const inboundSchema = VerifySenderResponse$inboundSchema;
  /** @deprecated use `VerifySenderResponse$outboundSchema` instead. */
  export const outboundSchema = VerifySenderResponse$outboundSchema;
  /** @deprecated use `VerifySenderResponse$Outbound` instead. */
  export type Outbound = VerifySenderResponse$Outbound;
}

export function verifySenderResponseToJSON(
  verifySenderResponse: VerifySenderResponse,
): string {
  return JSON.stringify(
    VerifySenderResponse$outboundSchema.parse(verifySenderResponse),
  );
}

export function verifySenderResponseFromJSON(
  jsonString: string,
): SafeParseResult<VerifySenderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifySenderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifySenderResponse' from JSON`,
  );
}
