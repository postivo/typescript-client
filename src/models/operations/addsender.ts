/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AddSenderResponseResult =
  | models.SenderDetails
  | models.ErrorResponse;

export type AddSenderResponse = {
  headers: { [k: string]: Array<string> };
  result: models.SenderDetails | models.ErrorResponse;
};

/** @internal */
export const AddSenderResponseResult$inboundSchema: z.ZodType<
  AddSenderResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.SenderDetails$inboundSchema,
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type AddSenderResponseResult$Outbound =
  | models.SenderDetails$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const AddSenderResponseResult$outboundSchema: z.ZodType<
  AddSenderResponseResult$Outbound,
  z.ZodTypeDef,
  AddSenderResponseResult
> = z.union([
  models.SenderDetails$outboundSchema,
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddSenderResponseResult$ {
  /** @deprecated use `AddSenderResponseResult$inboundSchema` instead. */
  export const inboundSchema = AddSenderResponseResult$inboundSchema;
  /** @deprecated use `AddSenderResponseResult$outboundSchema` instead. */
  export const outboundSchema = AddSenderResponseResult$outboundSchema;
  /** @deprecated use `AddSenderResponseResult$Outbound` instead. */
  export type Outbound = AddSenderResponseResult$Outbound;
}

export function addSenderResponseResultToJSON(
  addSenderResponseResult: AddSenderResponseResult,
): string {
  return JSON.stringify(
    AddSenderResponseResult$outboundSchema.parse(addSenderResponseResult),
  );
}

export function addSenderResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<AddSenderResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddSenderResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddSenderResponseResult' from JSON`,
  );
}

/** @internal */
export const AddSenderResponse$inboundSchema: z.ZodType<
  AddSenderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    models.SenderDetails$inboundSchema,
    models.ErrorResponse$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type AddSenderResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: models.SenderDetails$Outbound | models.ErrorResponse$Outbound;
};

/** @internal */
export const AddSenderResponse$outboundSchema: z.ZodType<
  AddSenderResponse$Outbound,
  z.ZodTypeDef,
  AddSenderResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    models.SenderDetails$outboundSchema,
    models.ErrorResponse$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddSenderResponse$ {
  /** @deprecated use `AddSenderResponse$inboundSchema` instead. */
  export const inboundSchema = AddSenderResponse$inboundSchema;
  /** @deprecated use `AddSenderResponse$outboundSchema` instead. */
  export const outboundSchema = AddSenderResponse$outboundSchema;
  /** @deprecated use `AddSenderResponse$Outbound` instead. */
  export type Outbound = AddSenderResponse$Outbound;
}

export function addSenderResponseToJSON(
  addSenderResponse: AddSenderResponse,
): string {
  return JSON.stringify(
    AddSenderResponse$outboundSchema.parse(addSenderResponse),
  );
}

export function addSenderResponseFromJSON(
  jsonString: string,
): SafeParseResult<AddSenderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddSenderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddSenderResponse' from JSON`,
  );
}
