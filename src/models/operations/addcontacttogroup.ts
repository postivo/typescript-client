/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AddContactToGroupRequest = {
  /**
   * Global contact `id` to add to the group.
   */
  id: number;
  /**
   * Group `id` to associate with the contact.
   */
  groupId: number;
};

export type AddContactToGroupResponse = {
  headers: { [k: string]: Array<string> };
  result: models.ErrorResponse;
};

/** @internal */
export const AddContactToGroupRequest$inboundSchema: z.ZodType<
  AddContactToGroupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  group_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "group_id": "groupId",
  });
});

/** @internal */
export type AddContactToGroupRequest$Outbound = {
  id: number;
  group_id: number;
};

/** @internal */
export const AddContactToGroupRequest$outboundSchema: z.ZodType<
  AddContactToGroupRequest$Outbound,
  z.ZodTypeDef,
  AddContactToGroupRequest
> = z.object({
  id: z.number().int(),
  groupId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    groupId: "group_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddContactToGroupRequest$ {
  /** @deprecated use `AddContactToGroupRequest$inboundSchema` instead. */
  export const inboundSchema = AddContactToGroupRequest$inboundSchema;
  /** @deprecated use `AddContactToGroupRequest$outboundSchema` instead. */
  export const outboundSchema = AddContactToGroupRequest$outboundSchema;
  /** @deprecated use `AddContactToGroupRequest$Outbound` instead. */
  export type Outbound = AddContactToGroupRequest$Outbound;
}

export function addContactToGroupRequestToJSON(
  addContactToGroupRequest: AddContactToGroupRequest,
): string {
  return JSON.stringify(
    AddContactToGroupRequest$outboundSchema.parse(addContactToGroupRequest),
  );
}

export function addContactToGroupRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddContactToGroupRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddContactToGroupRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddContactToGroupRequest' from JSON`,
  );
}

/** @internal */
export const AddContactToGroupResponse$inboundSchema: z.ZodType<
  AddContactToGroupResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: models.ErrorResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type AddContactToGroupResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: models.ErrorResponse$Outbound;
};

/** @internal */
export const AddContactToGroupResponse$outboundSchema: z.ZodType<
  AddContactToGroupResponse$Outbound,
  z.ZodTypeDef,
  AddContactToGroupResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: models.ErrorResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddContactToGroupResponse$ {
  /** @deprecated use `AddContactToGroupResponse$inboundSchema` instead. */
  export const inboundSchema = AddContactToGroupResponse$inboundSchema;
  /** @deprecated use `AddContactToGroupResponse$outboundSchema` instead. */
  export const outboundSchema = AddContactToGroupResponse$outboundSchema;
  /** @deprecated use `AddContactToGroupResponse$Outbound` instead. */
  export type Outbound = AddContactToGroupResponse$Outbound;
}

export function addContactToGroupResponseToJSON(
  addContactToGroupResponse: AddContactToGroupResponse,
): string {
  return JSON.stringify(
    AddContactToGroupResponse$outboundSchema.parse(addContactToGroupResponse),
  );
}

export function addContactToGroupResponseFromJSON(
  jsonString: string,
): SafeParseResult<AddContactToGroupResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddContactToGroupResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddContactToGroupResponse' from JSON`,
  );
}
