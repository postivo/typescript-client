/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ShipmentPriceResponseResult =
  | Array<models.ShipmentPrice>
  | models.ErrorResponse;

export type ShipmentPriceResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<models.ShipmentPrice> | models.ErrorResponse;
};

/** @internal */
export const ShipmentPriceResponseResult$inboundSchema: z.ZodType<
  ShipmentPriceResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(models.ShipmentPrice$inboundSchema),
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type ShipmentPriceResponseResult$Outbound =
  | Array<models.ShipmentPrice$Outbound>
  | models.ErrorResponse$Outbound;

/** @internal */
export const ShipmentPriceResponseResult$outboundSchema: z.ZodType<
  ShipmentPriceResponseResult$Outbound,
  z.ZodTypeDef,
  ShipmentPriceResponseResult
> = z.union([
  z.array(models.ShipmentPrice$outboundSchema),
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShipmentPriceResponseResult$ {
  /** @deprecated use `ShipmentPriceResponseResult$inboundSchema` instead. */
  export const inboundSchema = ShipmentPriceResponseResult$inboundSchema;
  /** @deprecated use `ShipmentPriceResponseResult$outboundSchema` instead. */
  export const outboundSchema = ShipmentPriceResponseResult$outboundSchema;
  /** @deprecated use `ShipmentPriceResponseResult$Outbound` instead. */
  export type Outbound = ShipmentPriceResponseResult$Outbound;
}

export function shipmentPriceResponseResultToJSON(
  shipmentPriceResponseResult: ShipmentPriceResponseResult,
): string {
  return JSON.stringify(
    ShipmentPriceResponseResult$outboundSchema.parse(
      shipmentPriceResponseResult,
    ),
  );
}

export function shipmentPriceResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<ShipmentPriceResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShipmentPriceResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShipmentPriceResponseResult' from JSON`,
  );
}

/** @internal */
export const ShipmentPriceResponse$inboundSchema: z.ZodType<
  ShipmentPriceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    z.array(models.ShipmentPrice$inboundSchema),
    models.ErrorResponse$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ShipmentPriceResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<models.ShipmentPrice$Outbound> | models.ErrorResponse$Outbound;
};

/** @internal */
export const ShipmentPriceResponse$outboundSchema: z.ZodType<
  ShipmentPriceResponse$Outbound,
  z.ZodTypeDef,
  ShipmentPriceResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    z.array(models.ShipmentPrice$outboundSchema),
    models.ErrorResponse$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShipmentPriceResponse$ {
  /** @deprecated use `ShipmentPriceResponse$inboundSchema` instead. */
  export const inboundSchema = ShipmentPriceResponse$inboundSchema;
  /** @deprecated use `ShipmentPriceResponse$outboundSchema` instead. */
  export const outboundSchema = ShipmentPriceResponse$outboundSchema;
  /** @deprecated use `ShipmentPriceResponse$Outbound` instead. */
  export type Outbound = ShipmentPriceResponse$Outbound;
}

export function shipmentPriceResponseToJSON(
  shipmentPriceResponse: ShipmentPriceResponse,
): string {
  return JSON.stringify(
    ShipmentPriceResponse$outboundSchema.parse(shipmentPriceResponse),
  );
}

export function shipmentPriceResponseFromJSON(
  jsonString: string,
): SafeParseResult<ShipmentPriceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShipmentPriceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShipmentPriceResponse' from JSON`,
  );
}
