/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Problem Details object (RFC 9457) describing the error.
 */
export type ErrorResponse = {
  /**
   * URI that identifies the problem type.
   */
  type?: string | undefined;
  /**
   * HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * Short, human-readable summary of the problem type.
   */
  title?: string | undefined;
  /**
   * Human-readable explanation specific to this occurrence of the problem.
   */
  detail?: string | undefined;
  /**
   * API-specific error code to help the provider team classify the error.
   */
  code?: string | undefined;
  /**
   * URI that identifies this specific occurrence of the problem.
   */
  instance?: string | undefined;
};

/** @internal */
export const ErrorResponse$inboundSchema: z.ZodType<
  ErrorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  status: z.number().int().optional(),
  title: z.string().optional(),
  detail: z.string().optional(),
  code: z.string().optional(),
  instance: z.string().optional(),
});

/** @internal */
export type ErrorResponse$Outbound = {
  type?: string | undefined;
  status?: number | undefined;
  title?: string | undefined;
  detail?: string | undefined;
  code?: string | undefined;
  instance?: string | undefined;
};

/** @internal */
export const ErrorResponse$outboundSchema: z.ZodType<
  ErrorResponse$Outbound,
  z.ZodTypeDef,
  ErrorResponse
> = z.object({
  type: z.string().optional(),
  status: z.number().int().optional(),
  title: z.string().optional(),
  detail: z.string().optional(),
  code: z.string().optional(),
  instance: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorResponse$ {
  /** @deprecated use `ErrorResponse$inboundSchema` instead. */
  export const inboundSchema = ErrorResponse$inboundSchema;
  /** @deprecated use `ErrorResponse$outboundSchema` instead. */
  export const outboundSchema = ErrorResponse$outboundSchema;
  /** @deprecated use `ErrorResponse$Outbound` instead. */
  export type Outbound = ErrorResponse$Outbound;
}

export function errorResponseToJSON(errorResponse: ErrorResponse): string {
  return JSON.stringify(ErrorResponse$outboundSchema.parse(errorResponse));
}

export function errorResponseFromJSON(
  jsonString: string,
): SafeParseResult<ErrorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorResponse' from JSON`,
  );
}
