/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ErrorResponse,
  ErrorResponse$inboundSchema,
  ErrorResponse$Outbound,
  ErrorResponse$outboundSchema,
} from "./errorresponse.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Result of cancelling a single shipment
 */
export type ShipmentCancellation = {
  /**
   * Shipment ID.
   */
  id?: string | undefined;
  /**
   * Cancellation status code (`204` if cancelled successfully; otherwise an error code).
   */
  status?: number | undefined;
  /**
   * Problem Details object (RFC 9457) describing the error.
   */
  error?: ErrorResponse | null | undefined;
};

/** @internal */
export const ShipmentCancellation$inboundSchema: z.ZodType<
  ShipmentCancellation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  status: z.number().int().optional(),
  error: z.nullable(ErrorResponse$inboundSchema).optional(),
});

/** @internal */
export type ShipmentCancellation$Outbound = {
  id?: string | undefined;
  status?: number | undefined;
  error?: ErrorResponse$Outbound | null | undefined;
};

/** @internal */
export const ShipmentCancellation$outboundSchema: z.ZodType<
  ShipmentCancellation$Outbound,
  z.ZodTypeDef,
  ShipmentCancellation
> = z.object({
  id: z.string().optional(),
  status: z.number().int().optional(),
  error: z.nullable(ErrorResponse$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShipmentCancellation$ {
  /** @deprecated use `ShipmentCancellation$inboundSchema` instead. */
  export const inboundSchema = ShipmentCancellation$inboundSchema;
  /** @deprecated use `ShipmentCancellation$outboundSchema` instead. */
  export const outboundSchema = ShipmentCancellation$outboundSchema;
  /** @deprecated use `ShipmentCancellation$Outbound` instead. */
  export type Outbound = ShipmentCancellation$Outbound;
}

export function shipmentCancellationToJSON(
  shipmentCancellation: ShipmentCancellation,
): string {
  return JSON.stringify(
    ShipmentCancellation$outboundSchema.parse(shipmentCancellation),
  );
}

export function shipmentCancellationFromJSON(
  jsonString: string,
): SafeParseResult<ShipmentCancellation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShipmentCancellation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShipmentCancellation' from JSON`,
  );
}
