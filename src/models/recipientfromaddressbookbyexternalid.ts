/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Select shipment recipient data from the Address Book by external (custom) ID.
 */
export type RecipientFromAddressBookByExternalId = {
  /**
   * External (custom) ID of the recipient stored in your Address Book.
   */
  extId: string;
  /**
   * Set to true to fetch recipient data by external ID from a main accountâ€™s shared Address Book.
   */
  fromShared?: boolean | undefined;
  /**
   * Custom shipment ID assigned by the user.
   */
  customId?: string | null | undefined;
  /**
   * Optional postscript printed above the recipient data on the envelope.
   */
  postscript?: string | null | undefined;
};

/** @internal */
export const RecipientFromAddressBookByExternalId$inboundSchema: z.ZodType<
  RecipientFromAddressBookByExternalId,
  z.ZodTypeDef,
  unknown
> = z.object({
  ext_id: z.string(),
  from_shared: z.boolean().default(false),
  custom_id: z.nullable(z.string()).default(null),
  postscript: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "ext_id": "extId",
    "from_shared": "fromShared",
    "custom_id": "customId",
  });
});

/** @internal */
export type RecipientFromAddressBookByExternalId$Outbound = {
  ext_id: string;
  from_shared: boolean;
  custom_id: string | null;
  postscript?: string | null | undefined;
};

/** @internal */
export const RecipientFromAddressBookByExternalId$outboundSchema: z.ZodType<
  RecipientFromAddressBookByExternalId$Outbound,
  z.ZodTypeDef,
  RecipientFromAddressBookByExternalId
> = z.object({
  extId: z.string(),
  fromShared: z.boolean().default(false),
  customId: z.nullable(z.string()).default(null),
  postscript: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    extId: "ext_id",
    fromShared: "from_shared",
    customId: "custom_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientFromAddressBookByExternalId$ {
  /** @deprecated use `RecipientFromAddressBookByExternalId$inboundSchema` instead. */
  export const inboundSchema =
    RecipientFromAddressBookByExternalId$inboundSchema;
  /** @deprecated use `RecipientFromAddressBookByExternalId$outboundSchema` instead. */
  export const outboundSchema =
    RecipientFromAddressBookByExternalId$outboundSchema;
  /** @deprecated use `RecipientFromAddressBookByExternalId$Outbound` instead. */
  export type Outbound = RecipientFromAddressBookByExternalId$Outbound;
}

export function recipientFromAddressBookByExternalIdToJSON(
  recipientFromAddressBookByExternalId: RecipientFromAddressBookByExternalId,
): string {
  return JSON.stringify(
    RecipientFromAddressBookByExternalId$outboundSchema.parse(
      recipientFromAddressBookByExternalId,
    ),
  );
}

export function recipientFromAddressBookByExternalIdFromJSON(
  jsonString: string,
): SafeParseResult<RecipientFromAddressBookByExternalId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientFromAddressBookByExternalId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecipientFromAddressBookByExternalId' from JSON`,
  );
}
