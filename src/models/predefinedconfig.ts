/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Predefined configuration usable for dispatching shipments (referenced via `predefined_config_id`).
 */
export type PredefinedConfig = {
  /**
   * Unique predefined configuration ID.
   */
  id?: number | undefined;
  /**
   * Predefined configuration name.
   */
  name?: string | undefined;
  /**
   * Paper type name.
   */
  paperName?: string | undefined;
  /**
   * Print documents in color (`true`) or grayscale (`false`).
   */
  colorPrint?: boolean | undefined;
  /**
   * Print documents duplex (`true`) or single-sided (`false`).
   */
  duplexPrint?: boolean | undefined;
  /**
   * Preferred envelope type name.
   */
  envelopeName?: string | undefined;
  /**
   * Preferred envelope size.
   */
  envelopeSize?: string | undefined;
  /**
   * Envelope group name.
   */
  envelopeGroupName?: string | undefined;
  /**
   * Print the envelope in color (`true`) or grayscale (`false`).
   */
  envelopeColorPrint?: boolean | undefined;
};

/** @internal */
export const PredefinedConfig$inboundSchema: z.ZodType<
  PredefinedConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  paper_name: z.string().optional(),
  color_print: z.boolean().optional(),
  duplex_print: z.boolean().optional(),
  envelope_name: z.string().optional(),
  envelope_size: z.string().optional(),
  envelope_group_name: z.string().optional(),
  envelope_color_print: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "paper_name": "paperName",
    "color_print": "colorPrint",
    "duplex_print": "duplexPrint",
    "envelope_name": "envelopeName",
    "envelope_size": "envelopeSize",
    "envelope_group_name": "envelopeGroupName",
    "envelope_color_print": "envelopeColorPrint",
  });
});

/** @internal */
export type PredefinedConfig$Outbound = {
  id?: number | undefined;
  name?: string | undefined;
  paper_name?: string | undefined;
  color_print?: boolean | undefined;
  duplex_print?: boolean | undefined;
  envelope_name?: string | undefined;
  envelope_size?: string | undefined;
  envelope_group_name?: string | undefined;
  envelope_color_print?: boolean | undefined;
};

/** @internal */
export const PredefinedConfig$outboundSchema: z.ZodType<
  PredefinedConfig$Outbound,
  z.ZodTypeDef,
  PredefinedConfig
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  paperName: z.string().optional(),
  colorPrint: z.boolean().optional(),
  duplexPrint: z.boolean().optional(),
  envelopeName: z.string().optional(),
  envelopeSize: z.string().optional(),
  envelopeGroupName: z.string().optional(),
  envelopeColorPrint: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    paperName: "paper_name",
    colorPrint: "color_print",
    duplexPrint: "duplex_print",
    envelopeName: "envelope_name",
    envelopeSize: "envelope_size",
    envelopeGroupName: "envelope_group_name",
    envelopeColorPrint: "envelope_color_print",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PredefinedConfig$ {
  /** @deprecated use `PredefinedConfig$inboundSchema` instead. */
  export const inboundSchema = PredefinedConfig$inboundSchema;
  /** @deprecated use `PredefinedConfig$outboundSchema` instead. */
  export const outboundSchema = PredefinedConfig$outboundSchema;
  /** @deprecated use `PredefinedConfig$Outbound` instead. */
  export type Outbound = PredefinedConfig$Outbound;
}

export function predefinedConfigToJSON(
  predefinedConfig: PredefinedConfig,
): string {
  return JSON.stringify(
    PredefinedConfig$outboundSchema.parse(predefinedConfig),
  );
}

export function predefinedConfigFromJSON(
  jsonString: string,
): SafeParseResult<PredefinedConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PredefinedConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PredefinedConfig' from JSON`,
  );
}
