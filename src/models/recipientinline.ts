/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Recipient data with full address for inline definition.
 */
export type RecipientInline = {
  /**
   * Name (person or company) — line 1.
   */
  name: string | null;
  /**
   * Name (person or company) — line 2.
   */
  name2?: string | null | undefined;
  /**
   * Street address.
   */
  address: string | null;
  /**
   * Building number.
   */
  homeNumber?: string | null | undefined;
  /**
   * Apartment (unit) number.
   */
  flatNumber?: string | null | undefined;
  /**
   * Postal code. For `PL`, 5-digit values are normalized to the `NN-NNN` format.
   */
  postCode: string | null;
  /**
   * City.
   */
  city: string | null;
  /**
   * Country code in ISO 3166-1 alpha-2 format. Default: "PL". Value is automatically uppercased. Full list: https://www.iso.org/iso-3166-country-codes.html
   */
  country?: string | null | undefined;
  /**
   * Phone number (E.164 format recommended).
   */
  phoneNumber?: string | null | undefined;
  /**
   * Optional postscript printed above the recipient data on the envelope.
   */
  postscript?: string | null | undefined;
  /**
   * Custom shipment identifier assigned by the user.
   */
  customId?: string | null | undefined;
};

/** @internal */
export const RecipientInline$inboundSchema: z.ZodType<
  RecipientInline,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  name2: z.nullable(z.string()).optional(),
  address: z.nullable(z.string()),
  home_number: z.nullable(z.string()).optional(),
  flat_number: z.nullable(z.string()).optional(),
  post_code: z.nullable(z.string()),
  city: z.nullable(z.string()),
  country: z.nullable(z.string().default("PL")),
  phone_number: z.nullable(z.string()).optional(),
  postscript: z.nullable(z.string()).optional(),
  custom_id: z.nullable(z.string()).default(null),
}).transform((v) => {
  return remap$(v, {
    "home_number": "homeNumber",
    "flat_number": "flatNumber",
    "post_code": "postCode",
    "phone_number": "phoneNumber",
    "custom_id": "customId",
  });
});

/** @internal */
export type RecipientInline$Outbound = {
  name: string | null;
  name2?: string | null | undefined;
  address: string | null;
  home_number?: string | null | undefined;
  flat_number?: string | null | undefined;
  post_code: string | null;
  city: string | null;
  country: string | null;
  phone_number?: string | null | undefined;
  postscript?: string | null | undefined;
  custom_id: string | null;
};

/** @internal */
export const RecipientInline$outboundSchema: z.ZodType<
  RecipientInline$Outbound,
  z.ZodTypeDef,
  RecipientInline
> = z.object({
  name: z.nullable(z.string()),
  name2: z.nullable(z.string()).optional(),
  address: z.nullable(z.string()),
  homeNumber: z.nullable(z.string()).optional(),
  flatNumber: z.nullable(z.string()).optional(),
  postCode: z.nullable(z.string()),
  city: z.nullable(z.string()),
  country: z.nullable(z.string().default("PL")),
  phoneNumber: z.nullable(z.string()).optional(),
  postscript: z.nullable(z.string()).optional(),
  customId: z.nullable(z.string()).default(null),
}).transform((v) => {
  return remap$(v, {
    homeNumber: "home_number",
    flatNumber: "flat_number",
    postCode: "post_code",
    phoneNumber: "phone_number",
    customId: "custom_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientInline$ {
  /** @deprecated use `RecipientInline$inboundSchema` instead. */
  export const inboundSchema = RecipientInline$inboundSchema;
  /** @deprecated use `RecipientInline$outboundSchema` instead. */
  export const outboundSchema = RecipientInline$outboundSchema;
  /** @deprecated use `RecipientInline$Outbound` instead. */
  export type Outbound = RecipientInline$Outbound;
}

export function recipientInlineToJSON(
  recipientInline: RecipientInline,
): string {
  return JSON.stringify(RecipientInline$outboundSchema.parse(recipientInline));
}

export function recipientInlineFromJSON(
  jsonString: string,
): SafeParseResult<RecipientInline, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RecipientInline$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecipientInline' from JSON`,
  );
}
