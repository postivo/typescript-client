/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Account type.
 */
export const AccountType = {
  /**
   * Account type PRE-PAID
   */
  PrePaid: "PRE-PAID",
  /**
   * Account type POST-PAID
   */
  PostPaid: "POST-PAID",
} as const;
/**
 * Account type.
 */
export type AccountType = ClosedEnum<typeof AccountType>;

/**
 * Account details, including balance and limits.
 */
export type AccountResponse = {
  /**
   * User login.
   */
  login?: string | undefined;
  /**
   * Account type.
   */
  accountType?: AccountType | undefined;
  /**
   * Account limit.
   */
  limit?: number | undefined;
  /**
   * Current account balance.
   */
  credit?: number | undefined;
  /**
   * Subaccount credit balance; null if unlimited.
   */
  subcredit?: number | null | undefined;
  /**
   * Account currency.
   */
  currency?: string | undefined;
  /**
   * User full name.
   */
  name?: string | undefined;
  /**
   * Indicates whether this is the main account.
   */
  isMain?: boolean | undefined;
};

/** @internal */
export const AccountType$inboundSchema: z.ZodNativeEnum<typeof AccountType> = z
  .nativeEnum(AccountType);

/** @internal */
export const AccountType$outboundSchema: z.ZodNativeEnum<typeof AccountType> =
  AccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountType$ {
  /** @deprecated use `AccountType$inboundSchema` instead. */
  export const inboundSchema = AccountType$inboundSchema;
  /** @deprecated use `AccountType$outboundSchema` instead. */
  export const outboundSchema = AccountType$outboundSchema;
}

/** @internal */
export const AccountResponse$inboundSchema: z.ZodType<
  AccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  login: z.string().optional(),
  account_type: AccountType$inboundSchema.optional(),
  limit: z.number().optional(),
  credit: z.number().optional(),
  subcredit: z.nullable(z.number()).optional(),
  currency: z.string().optional(),
  name: z.string().optional(),
  is_main: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "account_type": "accountType",
    "is_main": "isMain",
  });
});

/** @internal */
export type AccountResponse$Outbound = {
  login?: string | undefined;
  account_type?: string | undefined;
  limit?: number | undefined;
  credit?: number | undefined;
  subcredit?: number | null | undefined;
  currency?: string | undefined;
  name?: string | undefined;
  is_main?: boolean | undefined;
};

/** @internal */
export const AccountResponse$outboundSchema: z.ZodType<
  AccountResponse$Outbound,
  z.ZodTypeDef,
  AccountResponse
> = z.object({
  login: z.string().optional(),
  accountType: AccountType$outboundSchema.optional(),
  limit: z.number().optional(),
  credit: z.number().optional(),
  subcredit: z.nullable(z.number()).optional(),
  currency: z.string().optional(),
  name: z.string().optional(),
  isMain: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    accountType: "account_type",
    isMain: "is_main",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountResponse$ {
  /** @deprecated use `AccountResponse$inboundSchema` instead. */
  export const inboundSchema = AccountResponse$inboundSchema;
  /** @deprecated use `AccountResponse$outboundSchema` instead. */
  export const outboundSchema = AccountResponse$outboundSchema;
  /** @deprecated use `AccountResponse$Outbound` instead. */
  export type Outbound = AccountResponse$Outbound;
}

export function accountResponseToJSON(
  accountResponse: AccountResponse,
): string {
  return JSON.stringify(AccountResponse$outboundSchema.parse(accountResponse));
}

export function accountResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountResponse' from JSON`,
  );
}
