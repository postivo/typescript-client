/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Recipient,
  Recipient$inboundSchema,
  Recipient$Outbound,
  Recipient$outboundSchema,
} from "./recipient.js";
import {
  Sender,
  Sender$inboundSchema,
  Sender$Outbound,
  Sender$outboundSchema,
} from "./sender.js";

/**
 * Shipment processing status.
 */
export type ShipmentDetailsStatus = {
  /**
   * Indicates whether an error occurred during shipment processing.
   */
  error?: boolean | undefined;
  /**
   * Shipment status code.
   */
  code?: string | undefined;
  /**
   * Shipment status description.
   */
  name?: string | undefined;
  /**
   * Date and time of the shipment status change (UTC).
   */
  date?: Date | undefined;
};

/**
 * Postal operator handling the shipment.
 */
export type ShipmentDetailsCarrier = {
  /**
   * Postal operator ID.
   */
  id?: number | null | undefined;
  /**
   * Postal operator name.
   */
  name?: string | null | undefined;
};

/**
 * Service (shipment type) used.
 */
export type ShipmentDetailsService = {
  /**
   * Service type ID (shipment/letter type).
   */
  id?: number | null | undefined;
  /**
   * Service type name (shipment/letter type).
   */
  name?: string | null | undefined;
};

/**
 * Single shipment details
 */
export type ShipmentDetails = {
  /**
   * Unique shipment identifier.
   */
  id?: string | null | undefined;
  /**
   * Custom shipment ID assigned by the user.
   */
  customId?: string | null | undefined;
  /**
   * Carrier-provided shipment tracking number.
   */
  trackingNumber?: string | null | undefined;
  /**
   * Recipient data for a shipment, including full postal address.
   */
  recipient?: Recipient | undefined;
  /**
   * Sender data for the shipment.
   */
  sender?: Sender | undefined;
  /**
   * Shipment processing status.
   */
  status?: ShipmentDetailsStatus | undefined;
  /**
   * Postal operator handling the shipment.
   */
  carrier?: ShipmentDetailsCarrier | undefined;
  /**
   * Service (shipment type) used.
   */
  service?: ShipmentDetailsService | undefined;
  /**
   * Dispatch date.
   */
  dispatchDate?: RFCDate | null | undefined;
  /**
   * Total number of pages across all documents in the shipment.
   */
  pageNumber?: number | undefined;
  /**
   * Shipment price (PLN).
   */
  price?: number | undefined;
};

/** @internal */
export const ShipmentDetailsStatus$inboundSchema: z.ZodType<
  ShipmentDetailsStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.boolean().optional(),
  code: z.string().optional(),
  name: z.string().optional(),
  date: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type ShipmentDetailsStatus$Outbound = {
  error?: boolean | undefined;
  code?: string | undefined;
  name?: string | undefined;
  date?: string | undefined;
};

/** @internal */
export const ShipmentDetailsStatus$outboundSchema: z.ZodType<
  ShipmentDetailsStatus$Outbound,
  z.ZodTypeDef,
  ShipmentDetailsStatus
> = z.object({
  error: z.boolean().optional(),
  code: z.string().optional(),
  name: z.string().optional(),
  date: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShipmentDetailsStatus$ {
  /** @deprecated use `ShipmentDetailsStatus$inboundSchema` instead. */
  export const inboundSchema = ShipmentDetailsStatus$inboundSchema;
  /** @deprecated use `ShipmentDetailsStatus$outboundSchema` instead. */
  export const outboundSchema = ShipmentDetailsStatus$outboundSchema;
  /** @deprecated use `ShipmentDetailsStatus$Outbound` instead. */
  export type Outbound = ShipmentDetailsStatus$Outbound;
}

export function shipmentDetailsStatusToJSON(
  shipmentDetailsStatus: ShipmentDetailsStatus,
): string {
  return JSON.stringify(
    ShipmentDetailsStatus$outboundSchema.parse(shipmentDetailsStatus),
  );
}

export function shipmentDetailsStatusFromJSON(
  jsonString: string,
): SafeParseResult<ShipmentDetailsStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShipmentDetailsStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShipmentDetailsStatus' from JSON`,
  );
}

/** @internal */
export const ShipmentDetailsCarrier$inboundSchema: z.ZodType<
  ShipmentDetailsCarrier,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.number().int()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type ShipmentDetailsCarrier$Outbound = {
  id?: number | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const ShipmentDetailsCarrier$outboundSchema: z.ZodType<
  ShipmentDetailsCarrier$Outbound,
  z.ZodTypeDef,
  ShipmentDetailsCarrier
> = z.object({
  id: z.nullable(z.number().int()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShipmentDetailsCarrier$ {
  /** @deprecated use `ShipmentDetailsCarrier$inboundSchema` instead. */
  export const inboundSchema = ShipmentDetailsCarrier$inboundSchema;
  /** @deprecated use `ShipmentDetailsCarrier$outboundSchema` instead. */
  export const outboundSchema = ShipmentDetailsCarrier$outboundSchema;
  /** @deprecated use `ShipmentDetailsCarrier$Outbound` instead. */
  export type Outbound = ShipmentDetailsCarrier$Outbound;
}

export function shipmentDetailsCarrierToJSON(
  shipmentDetailsCarrier: ShipmentDetailsCarrier,
): string {
  return JSON.stringify(
    ShipmentDetailsCarrier$outboundSchema.parse(shipmentDetailsCarrier),
  );
}

export function shipmentDetailsCarrierFromJSON(
  jsonString: string,
): SafeParseResult<ShipmentDetailsCarrier, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShipmentDetailsCarrier$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShipmentDetailsCarrier' from JSON`,
  );
}

/** @internal */
export const ShipmentDetailsService$inboundSchema: z.ZodType<
  ShipmentDetailsService,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.number().int()).optional(),
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type ShipmentDetailsService$Outbound = {
  id?: number | null | undefined;
  name?: string | null | undefined;
};

/** @internal */
export const ShipmentDetailsService$outboundSchema: z.ZodType<
  ShipmentDetailsService$Outbound,
  z.ZodTypeDef,
  ShipmentDetailsService
> = z.object({
  id: z.nullable(z.number().int()).optional(),
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShipmentDetailsService$ {
  /** @deprecated use `ShipmentDetailsService$inboundSchema` instead. */
  export const inboundSchema = ShipmentDetailsService$inboundSchema;
  /** @deprecated use `ShipmentDetailsService$outboundSchema` instead. */
  export const outboundSchema = ShipmentDetailsService$outboundSchema;
  /** @deprecated use `ShipmentDetailsService$Outbound` instead. */
  export type Outbound = ShipmentDetailsService$Outbound;
}

export function shipmentDetailsServiceToJSON(
  shipmentDetailsService: ShipmentDetailsService,
): string {
  return JSON.stringify(
    ShipmentDetailsService$outboundSchema.parse(shipmentDetailsService),
  );
}

export function shipmentDetailsServiceFromJSON(
  jsonString: string,
): SafeParseResult<ShipmentDetailsService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShipmentDetailsService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShipmentDetailsService' from JSON`,
  );
}

/** @internal */
export const ShipmentDetails$inboundSchema: z.ZodType<
  ShipmentDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  custom_id: z.nullable(z.string()).optional(),
  tracking_number: z.nullable(z.string()).optional(),
  recipient: Recipient$inboundSchema.optional(),
  sender: Sender$inboundSchema.optional(),
  status: z.lazy(() => ShipmentDetailsStatus$inboundSchema).optional(),
  carrier: z.lazy(() => ShipmentDetailsCarrier$inboundSchema).optional(),
  service: z.lazy(() => ShipmentDetailsService$inboundSchema).optional(),
  dispatch_date: z.nullable(z.string().transform(v => new RFCDate(v)))
    .optional(),
  page_number: z.number().int().optional(),
  price: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_id": "customId",
    "tracking_number": "trackingNumber",
    "dispatch_date": "dispatchDate",
    "page_number": "pageNumber",
  });
});

/** @internal */
export type ShipmentDetails$Outbound = {
  id?: string | null | undefined;
  custom_id?: string | null | undefined;
  tracking_number?: string | null | undefined;
  recipient?: Recipient$Outbound | undefined;
  sender?: Sender$Outbound | undefined;
  status?: ShipmentDetailsStatus$Outbound | undefined;
  carrier?: ShipmentDetailsCarrier$Outbound | undefined;
  service?: ShipmentDetailsService$Outbound | undefined;
  dispatch_date?: string | null | undefined;
  page_number?: number | undefined;
  price?: number | undefined;
};

/** @internal */
export const ShipmentDetails$outboundSchema: z.ZodType<
  ShipmentDetails$Outbound,
  z.ZodTypeDef,
  ShipmentDetails
> = z.object({
  id: z.nullable(z.string()).optional(),
  customId: z.nullable(z.string()).optional(),
  trackingNumber: z.nullable(z.string()).optional(),
  recipient: Recipient$outboundSchema.optional(),
  sender: Sender$outboundSchema.optional(),
  status: z.lazy(() => ShipmentDetailsStatus$outboundSchema).optional(),
  carrier: z.lazy(() => ShipmentDetailsCarrier$outboundSchema).optional(),
  service: z.lazy(() => ShipmentDetailsService$outboundSchema).optional(),
  dispatchDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  pageNumber: z.number().int().optional(),
  price: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    customId: "custom_id",
    trackingNumber: "tracking_number",
    dispatchDate: "dispatch_date",
    pageNumber: "page_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShipmentDetails$ {
  /** @deprecated use `ShipmentDetails$inboundSchema` instead. */
  export const inboundSchema = ShipmentDetails$inboundSchema;
  /** @deprecated use `ShipmentDetails$outboundSchema` instead. */
  export const outboundSchema = ShipmentDetails$outboundSchema;
  /** @deprecated use `ShipmentDetails$Outbound` instead. */
  export type Outbound = ShipmentDetails$Outbound;
}

export function shipmentDetailsToJSON(
  shipmentDetails: ShipmentDetails,
): string {
  return JSON.stringify(ShipmentDetails$outboundSchema.parse(shipmentDetails));
}

export function shipmentDetailsFromJSON(
  jsonString: string,
): SafeParseResult<ShipmentDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShipmentDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShipmentDetails' from JSON`,
  );
}
