/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Select recipient data for a shipment from the Address Book.
 */
export type RecipientFromAddressBook = {
  /**
   * Global ID of the recipient stored in the personal Address Book.
   */
  id: number;
  /**
   * User-assigned custom shipment ID.
   */
  customId?: string | null | undefined;
  /**
   * Optional postscript printed above the recipient data on the envelope.
   */
  postscript?: string | null | undefined;
};

/** @internal */
export const RecipientFromAddressBook$inboundSchema: z.ZodType<
  RecipientFromAddressBook,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  custom_id: z.nullable(z.string()).default(null),
  postscript: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_id": "customId",
  });
});

/** @internal */
export type RecipientFromAddressBook$Outbound = {
  id: number;
  custom_id: string | null;
  postscript?: string | null | undefined;
};

/** @internal */
export const RecipientFromAddressBook$outboundSchema: z.ZodType<
  RecipientFromAddressBook$Outbound,
  z.ZodTypeDef,
  RecipientFromAddressBook
> = z.object({
  id: z.number().int(),
  customId: z.nullable(z.string()).default(null),
  postscript: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    customId: "custom_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientFromAddressBook$ {
  /** @deprecated use `RecipientFromAddressBook$inboundSchema` instead. */
  export const inboundSchema = RecipientFromAddressBook$inboundSchema;
  /** @deprecated use `RecipientFromAddressBook$outboundSchema` instead. */
  export const outboundSchema = RecipientFromAddressBook$outboundSchema;
  /** @deprecated use `RecipientFromAddressBook$Outbound` instead. */
  export type Outbound = RecipientFromAddressBook$Outbound;
}

export function recipientFromAddressBookToJSON(
  recipientFromAddressBook: RecipientFromAddressBook,
): string {
  return JSON.stringify(
    RecipientFromAddressBook$outboundSchema.parse(recipientFromAddressBook),
  );
}

export function recipientFromAddressBookFromJSON(
  jsonString: string,
): SafeParseResult<RecipientFromAddressBook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RecipientFromAddressBook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecipientFromAddressBook' from JSON`,
  );
}
