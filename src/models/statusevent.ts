/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Single shipment status event.
 */
export type StatusEvent = {
  /**
   * Unique status event ID.
   */
  uniqueId?: number | undefined;
  /**
   * Event type: `OK` (regular) or `EX` (exception/irregular).
   */
  type?: string | undefined;
  /**
   * Status event code.
   */
  code?: string | undefined;
  /**
   * Status event description.
   */
  name?: string | undefined;
  /**
   * Status event details (for EXTERNAL status codes).
   */
  details?: string | null | undefined;
  /**
   * Status event timestamp (UTC).
   */
  date?: Date | undefined;
};

/** @internal */
export const StatusEvent$inboundSchema: z.ZodType<
  StatusEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  unique_id: z.number().int().optional(),
  type: z.string().optional(),
  code: z.string().optional(),
  name: z.string().optional(),
  details: z.nullable(z.string()).optional(),
  date: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "unique_id": "uniqueId",
  });
});

/** @internal */
export type StatusEvent$Outbound = {
  unique_id?: number | undefined;
  type?: string | undefined;
  code?: string | undefined;
  name?: string | undefined;
  details?: string | null | undefined;
  date?: string | undefined;
};

/** @internal */
export const StatusEvent$outboundSchema: z.ZodType<
  StatusEvent$Outbound,
  z.ZodTypeDef,
  StatusEvent
> = z.object({
  uniqueId: z.number().int().optional(),
  type: z.string().optional(),
  code: z.string().optional(),
  name: z.string().optional(),
  details: z.nullable(z.string()).optional(),
  date: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    uniqueId: "unique_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusEvent$ {
  /** @deprecated use `StatusEvent$inboundSchema` instead. */
  export const inboundSchema = StatusEvent$inboundSchema;
  /** @deprecated use `StatusEvent$outboundSchema` instead. */
  export const outboundSchema = StatusEvent$outboundSchema;
  /** @deprecated use `StatusEvent$Outbound` instead. */
  export type Outbound = StatusEvent$Outbound;
}

export function statusEventToJSON(statusEvent: StatusEvent): string {
  return JSON.stringify(StatusEvent$outboundSchema.parse(statusEvent));
}

export function statusEventFromJSON(
  jsonString: string,
): SafeParseResult<StatusEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StatusEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StatusEvent' from JSON`,
  );
}
