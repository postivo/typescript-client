/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { ClientError } from "./clienterror.js";

/**
 * Problem Details object (RFC 9457) describing the error.
 */
export type ErrorResponseData = {
  /**
   * URI that identifies the problem type.
   */
  type?: string | undefined;
  /**
   * HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * Short, human-readable summary of the problem type.
   */
  title?: string | undefined;
  /**
   * Human-readable explanation specific to this occurrence of the problem.
   */
  detail?: string | undefined;
  /**
   * API-specific error code to help the provider team classify the error.
   */
  code?: string | undefined;
  /**
   * URI that identifies this specific occurrence of the problem.
   */
  instance?: string | undefined;
};

/**
 * Problem Details object (RFC 9457) describing the error.
 */
export class ErrorResponse extends ClientError {
  /**
   * URI that identifies the problem type.
   */
  type?: string | undefined;
  /**
   * HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status?: number | undefined;
  /**
   * Short, human-readable summary of the problem type.
   */
  title?: string | undefined;
  /**
   * Human-readable explanation specific to this occurrence of the problem.
   */
  detail?: string | undefined;
  /**
   * API-specific error code to help the provider team classify the error.
   */
  code?: string | undefined;
  /**
   * URI that identifies this specific occurrence of the problem.
   */
  instance?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ErrorResponseData;

  constructor(
    err: ErrorResponseData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.detail || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.type != null) this.type = err.type;
    if (err.status != null) this.status = err.status;
    if (err.title != null) this.title = err.title;
    if (err.detail != null) this.detail = err.detail;
    if (err.code != null) this.code = err.code;
    if (err.instance != null) this.instance = err.instance;

    this.name = "ErrorResponse";
  }
}

/** @internal */
export const ErrorResponse$inboundSchema: z.ZodType<
  ErrorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  status: z.number().int().optional(),
  title: z.string().optional(),
  detail: z.string().optional(),
  code: z.string().optional(),
  instance: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ErrorResponse(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ErrorResponse$Outbound = {
  type?: string | undefined;
  status?: number | undefined;
  title?: string | undefined;
  detail?: string | undefined;
  code?: string | undefined;
  instance?: string | undefined;
};

/** @internal */
export const ErrorResponse$outboundSchema: z.ZodType<
  ErrorResponse$Outbound,
  z.ZodTypeDef,
  ErrorResponse
> = z.instanceof(ErrorResponse)
  .transform(v => v.data$)
  .pipe(z.object({
    type: z.string().optional(),
    status: z.number().int().optional(),
    title: z.string().optional(),
    detail: z.string().optional(),
    code: z.string().optional(),
    instance: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorResponse$ {
  /** @deprecated use `ErrorResponse$inboundSchema` instead. */
  export const inboundSchema = ErrorResponse$inboundSchema;
  /** @deprecated use `ErrorResponse$outboundSchema` instead. */
  export const outboundSchema = ErrorResponse$outboundSchema;
  /** @deprecated use `ErrorResponse$Outbound` instead. */
  export type Outbound = ErrorResponse$Outbound;
}
