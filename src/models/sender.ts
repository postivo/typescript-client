/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Sender data for the shipment.
 */
export type Sender = {
  /**
   * Sender name (person or company) — line 1.
   */
  name: string | null;
  /**
   * Sender name (person or company) — line 2.
   */
  name2?: string | null | undefined;
  /**
   * Street address of the sender.
   */
  address: string | null;
  /**
   * Building number of the sender.
   */
  homeNumber?: string | null | undefined;
  /**
   * Apartment (unit) number of the sender.
   */
  flatNumber?: string | null | undefined;
  /**
   * Postal code. For `PL`, 5-digit values are normalized to the `NN-NNN` format.
   */
  postCode: string | null;
  /**
   * City of the sender.
   */
  city: string | null;
  /**
   * Country code in ISO 3166-1 alpha-2 format. Value is automatically uppercased. Full list: https://www.iso.org/iso-3166-country-codes.html
   */
  country?: string | null | undefined;
};

/** @internal */
export const Sender$inboundSchema: z.ZodType<Sender, z.ZodTypeDef, unknown> = z
  .object({
    name: z.nullable(z.string()),
    name2: z.nullable(z.string()).optional(),
    address: z.nullable(z.string()),
    home_number: z.nullable(z.string()).optional(),
    flat_number: z.nullable(z.string()).optional(),
    post_code: z.nullable(z.string()),
    city: z.nullable(z.string()),
    country: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "home_number": "homeNumber",
      "flat_number": "flatNumber",
      "post_code": "postCode",
    });
  });

/** @internal */
export type Sender$Outbound = {
  name: string | null;
  name2?: string | null | undefined;
  address: string | null;
  home_number?: string | null | undefined;
  flat_number?: string | null | undefined;
  post_code: string | null;
  city: string | null;
  country?: string | null | undefined;
};

/** @internal */
export const Sender$outboundSchema: z.ZodType<
  Sender$Outbound,
  z.ZodTypeDef,
  Sender
> = z.object({
  name: z.nullable(z.string()),
  name2: z.nullable(z.string()).optional(),
  address: z.nullable(z.string()),
  homeNumber: z.nullable(z.string()).optional(),
  flatNumber: z.nullable(z.string()).optional(),
  postCode: z.nullable(z.string()),
  city: z.nullable(z.string()),
  country: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    homeNumber: "home_number",
    flatNumber: "flat_number",
    postCode: "post_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sender$ {
  /** @deprecated use `Sender$inboundSchema` instead. */
  export const inboundSchema = Sender$inboundSchema;
  /** @deprecated use `Sender$outboundSchema` instead. */
  export const outboundSchema = Sender$outboundSchema;
  /** @deprecated use `Sender$Outbound` instead. */
  export type Outbound = Sender$Outbound;
}

export function senderToJSON(sender: Sender): string {
  return JSON.stringify(Sender$outboundSchema.parse(sender));
}

export function senderFromJSON(
  jsonString: string,
): SafeParseResult<Sender, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Sender$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Sender' from JSON`,
  );
}
