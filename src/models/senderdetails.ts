/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Sender,
  Sender$inboundSchema,
  Sender$Outbound,
  Sender$outboundSchema,
} from "./sender.js";

/**
 * Extended sender details.
 */
export type SenderDetails = {
  /**
   * Unique sender ID.
   */
  id?: number | undefined;
  /**
   * Sender data for the shipment.
   */
  sender: Sender;
  /**
   * Indicates whether the sender is active.
   */
  active: boolean;
  /**
   * Indicates whether this is the default sender.
   */
  default: boolean;
};

/** @internal */
export const SenderDetails$inboundSchema: z.ZodType<
  SenderDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  sender: Sender$inboundSchema,
  active: z.boolean(),
  default: z.boolean(),
});

/** @internal */
export type SenderDetails$Outbound = {
  id?: number | undefined;
  sender: Sender$Outbound;
  active: boolean;
  default: boolean;
};

/** @internal */
export const SenderDetails$outboundSchema: z.ZodType<
  SenderDetails$Outbound,
  z.ZodTypeDef,
  SenderDetails
> = z.object({
  id: z.number().int().optional(),
  sender: Sender$outboundSchema,
  active: z.boolean(),
  default: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SenderDetails$ {
  /** @deprecated use `SenderDetails$inboundSchema` instead. */
  export const inboundSchema = SenderDetails$inboundSchema;
  /** @deprecated use `SenderDetails$outboundSchema` instead. */
  export const outboundSchema = SenderDetails$outboundSchema;
  /** @deprecated use `SenderDetails$Outbound` instead. */
  export type Outbound = SenderDetails$Outbound;
}

export function senderDetailsToJSON(senderDetails: SenderDetails): string {
  return JSON.stringify(SenderDetails$outboundSchema.parse(senderDetails));
}

export function senderDetailsFromJSON(
  jsonString: string,
): SafeParseResult<SenderDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SenderDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SenderDetails' from JSON`,
  );
}
