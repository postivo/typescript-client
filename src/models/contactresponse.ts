/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Contact details returned by the API for an Address Book entry.
 */
export type ContactResponse = {
  /**
   * Name (person or company) — line 1.
   */
  name: string | null;
  /**
   * Name (person or company) — line 2.
   */
  name2?: string | null | undefined;
  /**
   * Street address.
   */
  address: string | null;
  /**
   * Building number.
   */
  homeNumber?: string | null | undefined;
  /**
   * Apartment (unit) number.
   */
  flatNumber?: string | null | undefined;
  /**
   * Postal code. For `PL`, 5-digit values are normalized to the `NN-NNN` format.
   */
  postCode: string | null;
  /**
   * City.
   */
  city: string | null;
  /**
   * Country code in ISO 3166-1 alpha-2 format. Default: "PL". Value is automatically uppercased. Full list: https://www.iso.org/iso-3166-country-codes.html
   */
  country?: string | null | undefined;
  /**
   * Phone number (E.164 format recommended).
   */
  phoneNumber?: string | null | undefined;
  /**
   * Custom (external) contact ID; must be unique per contact.
   */
  extId?: string | null | undefined;
  /**
   * IDs of groups the contact belongs to.
   */
  groupIds?: Array<number> | null | undefined;
  /**
   * Unique system-assigned contact ID.
   */
  id: number;
  /**
   * Indicates whether the contact data was inherited from a main account’s shared Address Book.
   */
  inherited?: boolean | undefined;
};

/** @internal */
export const ContactResponse$inboundSchema: z.ZodType<
  ContactResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  name2: z.nullable(z.string()).optional(),
  address: z.nullable(z.string()),
  home_number: z.nullable(z.string()).optional(),
  flat_number: z.nullable(z.string()).optional(),
  post_code: z.nullable(z.string()),
  city: z.nullable(z.string()),
  country: z.nullable(z.string().default("PL")),
  phone_number: z.nullable(z.string()).optional(),
  ext_id: z.nullable(z.string()).optional(),
  group_ids: z.nullable(z.array(z.number().int())).optional(),
  id: z.number().int(),
  inherited: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "home_number": "homeNumber",
    "flat_number": "flatNumber",
    "post_code": "postCode",
    "phone_number": "phoneNumber",
    "ext_id": "extId",
    "group_ids": "groupIds",
  });
});

/** @internal */
export type ContactResponse$Outbound = {
  name: string | null;
  name2?: string | null | undefined;
  address: string | null;
  home_number?: string | null | undefined;
  flat_number?: string | null | undefined;
  post_code: string | null;
  city: string | null;
  country: string | null;
  phone_number?: string | null | undefined;
  ext_id?: string | null | undefined;
  group_ids?: Array<number> | null | undefined;
  id: number;
  inherited?: boolean | undefined;
};

/** @internal */
export const ContactResponse$outboundSchema: z.ZodType<
  ContactResponse$Outbound,
  z.ZodTypeDef,
  ContactResponse
> = z.object({
  name: z.nullable(z.string()),
  name2: z.nullable(z.string()).optional(),
  address: z.nullable(z.string()),
  homeNumber: z.nullable(z.string()).optional(),
  flatNumber: z.nullable(z.string()).optional(),
  postCode: z.nullable(z.string()),
  city: z.nullable(z.string()),
  country: z.nullable(z.string().default("PL")),
  phoneNumber: z.nullable(z.string()).optional(),
  extId: z.nullable(z.string()).optional(),
  groupIds: z.nullable(z.array(z.number().int())).optional(),
  id: z.number().int(),
  inherited: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    homeNumber: "home_number",
    flatNumber: "flat_number",
    postCode: "post_code",
    phoneNumber: "phone_number",
    extId: "ext_id",
    groupIds: "group_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactResponse$ {
  /** @deprecated use `ContactResponse$inboundSchema` instead. */
  export const inboundSchema = ContactResponse$inboundSchema;
  /** @deprecated use `ContactResponse$outboundSchema` instead. */
  export const outboundSchema = ContactResponse$outboundSchema;
  /** @deprecated use `ContactResponse$Outbound` instead. */
  export type Outbound = ContactResponse$Outbound;
}

export function contactResponseToJSON(
  contactResponse: ContactResponse,
): string {
  return JSON.stringify(ContactResponse$outboundSchema.parse(contactResponse));
}

export function contactResponseFromJSON(
  jsonString: string,
): SafeParseResult<ContactResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactResponse' from JSON`,
  );
}
