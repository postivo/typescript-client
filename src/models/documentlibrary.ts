/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A document from the user's account library.
 */
export type DocumentLibrary = {
  /**
   * ID of the document stored in the userâ€™s document library.
   */
  id: number;
};

/** @internal */
export const DocumentLibrary$inboundSchema: z.ZodType<
  DocumentLibrary,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
});

/** @internal */
export type DocumentLibrary$Outbound = {
  id: number;
};

/** @internal */
export const DocumentLibrary$outboundSchema: z.ZodType<
  DocumentLibrary$Outbound,
  z.ZodTypeDef,
  DocumentLibrary
> = z.object({
  id: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentLibrary$ {
  /** @deprecated use `DocumentLibrary$inboundSchema` instead. */
  export const inboundSchema = DocumentLibrary$inboundSchema;
  /** @deprecated use `DocumentLibrary$outboundSchema` instead. */
  export const outboundSchema = DocumentLibrary$outboundSchema;
  /** @deprecated use `DocumentLibrary$Outbound` instead. */
  export type Outbound = DocumentLibrary$Outbound;
}

export function documentLibraryToJSON(
  documentLibrary: DocumentLibrary,
): string {
  return JSON.stringify(DocumentLibrary$outboundSchema.parse(documentLibrary));
}

export function documentLibraryFromJSON(
  jsonString: string,
): SafeParseResult<DocumentLibrary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentLibrary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentLibrary' from JSON`,
  );
}
