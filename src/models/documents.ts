/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DocumentLibrary,
  DocumentLibrary$inboundSchema,
  DocumentLibrary$Outbound,
  DocumentLibrary$outboundSchema,
} from "./documentlibrary.js";
import {
  DocumentMock,
  DocumentMock$inboundSchema,
  DocumentMock$Outbound,
  DocumentMock$outboundSchema,
} from "./documentmock.js";
import {
  DocumentPdf,
  DocumentPdf$inboundSchema,
  DocumentPdf$Outbound,
  DocumentPdf$outboundSchema,
} from "./documentpdf.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A base document object.
 */
export type Documents = DocumentPdf | DocumentLibrary | DocumentMock;

/** @internal */
export const Documents$inboundSchema: z.ZodType<
  Documents,
  z.ZodTypeDef,
  unknown
> = z.union([
  DocumentPdf$inboundSchema,
  DocumentLibrary$inboundSchema,
  DocumentMock$inboundSchema,
]);

/** @internal */
export type Documents$Outbound =
  | DocumentPdf$Outbound
  | DocumentLibrary$Outbound
  | DocumentMock$Outbound;

/** @internal */
export const Documents$outboundSchema: z.ZodType<
  Documents$Outbound,
  z.ZodTypeDef,
  Documents
> = z.union([
  DocumentPdf$outboundSchema,
  DocumentLibrary$outboundSchema,
  DocumentMock$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Documents$ {
  /** @deprecated use `Documents$inboundSchema` instead. */
  export const inboundSchema = Documents$inboundSchema;
  /** @deprecated use `Documents$outboundSchema` instead. */
  export const outboundSchema = Documents$outboundSchema;
  /** @deprecated use `Documents$Outbound` instead. */
  export type Outbound = Documents$Outbound;
}

export function documentsToJSON(documents: Documents): string {
  return JSON.stringify(Documents$outboundSchema.parse(documents));
}

export function documentsFromJSON(
  jsonString: string,
): SafeParseResult<Documents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Documents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Documents' from JSON`,
  );
}
